{"version":3,"sources":["../../src/index.js","../../src/createContext.js","../../src/useContextSelector.js","StateManagement/middlewares/logger.js","StateManagement/count.js","StateManagement/asyncCount.js","StateManagement/States.js","Text.js","Number.js","CountAsync.js","App.js","index.js"],"names":["DiffuseContext","defaultValue","ProviderOriginal","context","createContextOriginal","value","current","register","Consumer","Provider","children","valueRef","useRef","listenersRef","Set","contextValue","registerListener","listener","add","listeners","useEffect","forEach","React","createContext","useFuse","fuseName","selector","useContext","selectorRef","useState","selectedValue","setSelectedValue","newValue","newSelectedValue","useContextSelector","cntxt","wire","Child","props","fuses","memoConstraint","i","length","push","store","useMemo","Reduce","reducer","initialState","middleware","asyncReducer","actions","asyncActions","useReducer","state","action","dispatch","onLoading","dispatchWithMiddleWare","type","onSuccess","payload","onFail","onProgress","afterWare","newAction","undefined","beforeWare","Object","keys","includes","_asyncReducer","enhancedAsyncDispatch","newStore","res","enhancedDispatch","actionKeys","asyncActionKeys","actionDispatch","map","a","actionsDispatch","createReducer","diffuse","loading","error","actionsDict","INITIALIZE_STORE","LOADING","SUCCESS","PROGRESS","FAIL","asyncActionsDict","initialize","name","addAction","actionName","job","removeAction","getActions","key","reducers","mergedReducers","globalState","r","MergeReducers","values","console","log","item","INCREMENT","DECREMENT","logger","GET_COUNT","axios","get","then","Promise","resolve","setTimeout","message","AReducer","randomColor","color","Math","floor","random","Text2","setState","style","backgroundColor","onClick","e","stopPropagation","preventDefault","BReducer","test","AsyncReducer","App","Reducer","count","asyncCount","className","ReactDOM","render","document","getElementById"],"mappings":"qcAYA,IAAMA,ECwBS,SAAuBC,GACtC,IA7BwBC,EA6BlBC,EAAUC,wBAAsB,CAClCC,MAAO,CACHC,QAASL,GAEbM,SAAU,WACN,OAAO,gBAQf,cAJOJ,EAAQK,SAEfL,EAAQM,UAxCgBP,EAwCUC,EAAQM,SAvC/B,YAAyB,IAAtBJ,EAAsB,EAAtBA,MAAOK,EAAe,EAAfA,SACPC,EAAWC,iBAAOP,GAClBQ,EAAeD,iBAAO,IAAIE,KAC1BC,EAAeH,iBAAO,CAC5BP,MAAOM,EACPK,iBAAkB,SAACC,GAEf,OADAJ,EAAaP,QAAQY,IAAID,GAClB,kBAAMJ,EAAaP,QAAbO,OAA4BI,KAE7CE,UAAW,IAAIL,MAUf,OAPAM,qBAAU,WACVT,EAASL,QAAUD,EACnBQ,EAAaP,QAAQe,SAAQ,SAACJ,GAC1BA,EAASZ,QAEV,CAACA,IAGJiB,kBAACpB,EAAD,CAAkBG,MAAOU,EAAaT,SACjCI,KAoBNP,EDtCgBoB,GAEjBC,EAAU,SAACC,GACf,OEba,SAA4BtB,EAASuB,GAClD,MAAoCC,qBAAWxB,GAAvCE,EAAR,EAAQA,MAAOW,EAAf,EAAeA,iBACTY,EAAchB,iBAAOc,GAC3B,EAA0CG,oBAAS,kBACjDH,EAASrB,EAAMC,YADVwB,EAAP,KAAsBC,EAAtB,KAmBA,OAfAX,qBAAU,WACRQ,EAAYtB,QAAUoB,KAGxBN,qBAAU,WAQR,OAF2BJ,GALC,SAACgB,GAC3B,IAAMC,EAAmBL,EAAYtB,QAAQ0B,GAC7CD,GAAiB,kBAAME,UAMxB,CAACjB,EAAkBX,IAEfyB,EFTAI,CAAmBlC,GAAgB,SAAAmC,GAAK,OAAIA,EAAMV,OAUrDW,EACJ,SAAC,GAAD,QAAGX,gBAAH,MAAc,GAAd,EAAkBY,EAAlB,EAAkBA,MAAlB,OACA,SAACC,GAIC,IAFA,IAAMC,EAAQ,GACRC,EAAiB,GACdC,EAAI,EAAGA,EAAIhB,EAASiB,OAAQD,IAAK,CACxC,IAAItC,EAAUqB,EAAQC,EAASgB,IAC/BF,EAAMd,EAASgB,IAAMtC,EACrBqC,EAAeG,KAAKxC,EAAQyC,OAI9B,OAAOC,mBACL,kBAAMvB,kBAACe,EAAD,KAAWE,EAAWD,MADhB,CAEXA,GAFW,OAEDE,MAUXM,EAAS,SAAC,GAOV,IANJC,EAMI,EANJA,QACAC,EAKI,EALJA,aACAC,EAII,EAJJA,WAII,IAHJC,oBAGI,MAHW,KAGX,EAFJC,EAEI,EAFJA,QACAC,EACI,EADJA,aAGA,EAA0B9B,IAAM+B,YAC9B,SAACC,EAAOC,GAAR,OAAmBA,EAAOX,QAC1BI,GAFKM,EAAP,KAAcE,EAAd,KAwBMC,EAAY,WAChB,OAAOC,EAAuB,CAAEC,KAAM,aAIlCC,EAAY,SAACC,GACjB,OAAOH,EAAuB,CAAEC,KAAM,UAAWE,aAI7CC,EAAS,SAACD,GACd,OAAOH,EAAuB,CAAEC,KAAM,OAAQE,aAI1CE,EAAa,SAACF,GAClB,OAAOH,EAAuB,CAAEC,KAAM,WAAYE,aAI9CH,EAAyB,SAAOH,GAAV,IAAqB,iBA0C/C,OAPIN,GAAcA,EAAWe,WAC3Bf,EAAWe,UAAU3C,SAAQ,SAAC2C,GAC5BA,EAAUC,MAKPA,GAxCHA,EAAYV,OAGQW,IAApBD,EAAUrB,QACZqB,EAAUrB,MAAQU,GAIhBL,GAAcA,EAAWkB,YAC3BlB,EAAWkB,WAAW9C,SAAQ,SAAC8C,GAC7BA,EAAWF,MAZgC,oBAkB5B,OAAjBf,GACAkB,OAAOC,KAAKjB,GAAckB,SAASL,EAAUN,MAnBA,uBA3BnB,SAAOM,GAAV,IAAwB,uBAEzCf,EAAae,EAAWL,EAAWE,EAAQC,EAAYN,IAFd,kBACjD,OAAOc,EAEL3B,SAHuB,mCAiDA4B,CAAsBP,IAtBA,eAsBvCQ,GAGNR,EAAY,EAAH,GAAQA,EAAR,CAAmBrB,MAAO,EAAF,GAAO6B,QAGxC,IAAMA,EAAW,EAAH,GAlEO,SAACR,GACxB,IAAMS,EAAM3B,EAAQkB,EAAUrB,MAAOqB,GAMrC,OALIA,EAAUrB,QAAU8B,IACtBT,EAAUrB,MAAQ8B,GAGpBlB,EAASS,GACFS,EA2DiBC,CAAiBV,IAGvCA,EAAY,EAAH,GAAQA,EAAR,CAAmBrB,MAAO,EAAF,GAAO6B,KA/BK,mDAArB,oCA6E5B,MAjBc,CAKZ7B,MAAOU,EAIPE,SAAUE,EAKVP,QA7BoB,WACpB,IAAIyB,EAAaR,OAAOC,KAAKlB,GACzB0B,EAAkBT,OAAOC,KAAKjB,GAC9B0B,EAAiB,GASrB,OARAF,EAAWG,KAAI,SAACC,GACdF,EAAeE,GAAK,SAACnB,GAAD,OAAaH,EAAuB,CAACC,KAAMqB,EAAGnB,QAASA,QAG7EgB,EAAgBE,KAAI,SAACC,GACnBF,EAAeE,GAAK,SAACnB,GAAD,OAAaH,EAAuB,CAACC,KAAMqB,EAAGnB,QAASA,QAGtEiB,EAiBEG,KA8CPC,EAAgB,SAAC,GAKjB,QAJJlC,oBAII,MAJW,GAIX,MAHJG,eAGI,MAHM,GAGN,MAFJF,kBAEI,MAFS,CAAEkB,WAAY,GAAIH,UAAW,IAEtC,EAEEjB,EAAU,CACdC,aAAc,EAAF,CACVmC,QAAS,CACPC,SAAS,EACTC,OAAO,IAENrC,GAELsC,YAAa,CACXC,iBAAkB,SAACjC,EAAOO,GACxB,YADyC,IAAjBA,MAAU,IAC3B,EAAP,CACEsB,QAAS,CACPC,SAAS,EACTC,OAAO,IAENrC,EACAa,IAGP2B,QAAS,SAAClC,GACR,MAAO,CACL6B,QAAS,CACPC,SAAS,EACTC,OAAO,KAIbI,QAAS,SAACnC,EAAOO,GACf,OAAO,EAAP,CACEsB,QAAS,CACPC,SAAS,EACTC,OAAO,IAENxB,IAGP6B,SAAU,SAACpC,EAAOO,GAChB,OAAO,EAAP,GACKA,IAGP8B,KAAM,SAACrC,EAAOO,GACZ,OAAO,EAAP,CACEsB,QAAS,CACPC,SAAS,EACTC,OAAO,IAENxB,KAIT+B,iBAAkB,GAClB3C,WAAYA,EAEZ4C,WAAY,SAACC,GAAD,MAAW,CACrBA,KAAMA,EACN9C,aAAc,EAAF,GAAOD,EAAQC,cAC3BD,QAASA,EAAQA,QACjBE,WAAYA,EACZC,aAAcH,EAAQG,aACtBC,QAASJ,EAAQuC,YACjBlC,aAAcL,EAAQ6C,mBAExB7C,QAAS,SAACO,EAAOC,GAEf,GAAIA,EAAOI,QAAQZ,EAAQuC,YAEzB,OAAO,EAAP,GACKhC,EAFOP,EAAQuC,YAAY/B,EAAOI,MAAML,EAAOC,EAAOM,WAO/DX,aAAc,SAAOK,EAAQK,EAAWE,EAAQC,EAAYN,GAAhD,IAA8D,OACxEA,IADwE,gBAG5DV,EAAQ6C,iBAAiBrC,EAAOI,MAAM,CAC5CL,MAAOC,EAAOX,MACdiB,QAASN,EAAOM,SAElBD,EACAE,EACAC,IAToE,kBAExE,OAAO,EAAP,MASEJ,KAAMJ,EAAOI,UAXL,oCAcZoC,UAAW,SAACC,EAAYzC,GAEF,WAAhBA,EAAOI,KACTZ,EAAQuC,YAAYU,GAAczC,EAAO0C,IAGlB,UAAhB1C,EAAOI,OACdZ,EAAQ6C,iBAAiBI,GAAczC,EAAO0C,MAGlDC,aAAc,SAACF,GAETA,KAAcjD,EAAQuC,oBACjBvC,EAAQuC,YAAYU,IAG/BG,WAAY,WAEV,IAAMhD,EAAU,GAGhB,IAAK,IAAMiD,KAAOrD,EAAQuC,YACxBnC,EAAQR,KAAKI,EAAQuC,YAAYc,IAInC,OAAOjD,IAKX,IAAK,IAAMiD,KAAOjD,EAChBJ,EAAQgD,UAAUK,EAAKjD,EAAQiD,IAGjC,OAAOrD,G,EAOO,SAAC,GAUf,IAV0C,IAAzBsD,EAAyB,EAAzBA,SAAU3F,EAAe,EAAfA,SAErB4F,EA9Kc,SAACC,QAAqB,IAArBA,MAAc,IAEnC,IAAMF,EAAWE,EAAYxB,KAAI,SAACzB,GAAU,MAC1C,OAAO,EAAP,IACGA,EAAMwC,MAAO,WASZ,OARgBhD,EAAO,CACrBC,QAASO,EAAMP,QACfC,aAAcM,EAAMN,aACpBC,WAAYK,EAAML,WAClBC,aAAcI,EAAMJ,aACpBC,QAASG,EAAMH,QACfC,aAAcE,EAAMF,gBAR1B,KAyBF,OANAiD,EAAStB,KAAI,SAACyB,GACZpC,OAAOC,KAAKmC,GAAGzB,KAAI,SAACqB,UAKfC,EAkJgBI,CAAcJ,GAG/BK,EAAS,GAKNjE,EAAI,EAAGA,EAAI6D,EAAe5D,OAAQD,IAAK,CAC9C,IAAI4B,EAAOD,OAAOC,KAAKiC,EAAe7D,IAAI,GAC1CiE,EAAOrC,GAAQiC,EAAe7D,GAAG4B,KAInC,OACE/C,kBAACtB,EAAeS,SAAhB,CAAyBJ,MAAOqG,GAAShG,IGxX9B,WAACoF,GAAD,OAAU,SAACvC,GACxBoD,QAAQC,IAAId,EAAMvC,EAAOI,KAAMJ,EAAOX,SC6BzBG,EA3BCmC,EAAc,CAC5BlC,aAAc,CAAE6D,KAAM,GACtB1D,QAAS,CACP2D,UAAW,CACTnD,KAAM,SACNsC,IAAK,SAAC3C,EAAOO,GAEX,OADA8C,QAAQC,IAAI/C,GACL,CACLgD,KAAMvD,EAAMuD,KAAO,KAIzBE,UAAW,CACTpD,KAAM,SACNsC,IAAK,SAAC3C,GACJ,MAAO,CACLuD,KAAMvD,EAAMuD,KAAO,MAK3B5D,WAAY,CACVe,UAAW,CAACgD,EAAO,UACnB7C,WAAY,CAAC6C,EAAO,c,gCCtBlBjE,EAAUmC,EAAc,CAC5BlC,aAAc,CACZ6D,KAAM,GAER1D,QAAS,CACP2D,UAAW,CACTnD,KAAM,SACNsC,IAAK,SAAC3C,EAAOO,GACX,MAAO,CACLgD,KAAMvD,EAAMuD,KAAO,KAIzBE,UAAW,CACTpD,KAAM,SACNsC,IAAK,SAAC3C,GACJ,MAAO,CACLuD,KAAMvD,EAAMuD,KAAO,KAIzBI,UAAW,CACTtD,KAAM,QACNsC,IAAI,WAAD,sCAAE,aAAyBrC,EAAWE,EAAQC,GAA5C,0FAAQT,EAAR,EAAQA,MAAOO,EAAf,EAAeA,QAAf,SAED8C,QAAQC,IAAI/C,GAFX,SAIkBqD,IAChBC,IAAI,yCACJC,MACC,SAAC/G,GAAD,OACE,IAAIgH,SAAQ,SAACC,GACXC,YAAW,WACTD,EAAQjH,KACP,WAXV,uCAeMuD,EAAU,CAAEiD,KAAMvD,EAAMuD,KAAO,KAfrC,gCAiBD/C,EAAO,CAAEuB,MAAO,KAAEmC,UAjBjB,yDAAF,yDAAC,KAsBRvE,WAAY,CACVe,UAAW,CAACgD,EAAO,UACnB7C,WAAY,CAAC6C,EAAO,cAITjE,I,QCvDF0E,EAAW,W,OCKxB,SAASC,IAGP,IAFA,IACIC,EAAQ,IACHlF,EAAI,EAAGA,EAAI,EAAGA,IAAKkF,GAFZ,mBAE6BC,KAAKC,MAAsB,GAAhBD,KAAKE,WAC7D,OAAOH,EAGT,IAAMI,EAAQ,SAACzF,GACb,MAA0BT,mBAAS,GAAnC,mBAAOyB,EAAP,KAAc0E,EAAd,KAEA,OACE,sBACEC,MAAO,CAAEC,gBAAgB,GAAD,OAAKR,MAC7BS,QAAS,SAACC,GACRA,EAAEC,kBACFD,EAAEE,iBAEFN,EADe1E,EAAQ,IAL3B,oBASUA,EATV,mCA+BWlB,IAAK,CAAEX,SAAU,CAACgG,GAAWpF,MAjB/B,SAACC,GACZ,OACE,sBACE2F,MAAO,CAAEC,gBAAgB,GAAD,OAAKR,MAC7BS,QAAS,kBACP7F,EAAMmF,SAASjE,SAAS,CACtBG,KAAM,eAJZ,mBAQSrB,EAAMmF,SAAS7E,MAAMiE,KAR9B,mDAUE,cAAC,EAAD,UCvCN,SAASa,IAGP,IAFA,IACIC,EAAQ,IACHlF,EAAI,EAAGA,EAAI,EAAGA,IAAKkF,GAFZ,mBAE6BC,KAAKC,MAAsB,GAAhBD,KAAKE,WAC7D,OAAOH,EAGT,IAeevF,IAAK,CAClBX,SAAU,CFzBY,WEyBDgG,GACrBpF,MAjBa,SAACC,GACd,IAAKiG,EAAYjG,EAAZiG,SACL,OACE,sBACEN,MAAO,CAAEC,gBAAgB,GAAD,OAAKR,MAC7BS,QAAS,kBACPI,EAASpF,QAAQ2D,UAAU,CAAC0B,KAAM,aAHtC,qBAMWlG,EAAMiG,SAAS3F,MAAMiE,KANhC,mECTJ,SAASa,IAGP,IAFA,IACIC,EAAQ,IACHlF,EAAI,EAAGA,EAAI,EAAGA,IAAKkF,GAFZ,mBAE6BC,KAAKC,MAAsB,GAAhBD,KAAKE,WAC7D,OAAOH,EAGT,IAmBevF,IAAK,CAClBX,SAAU,CH7BgB,gBG8B1BY,MArBiB,SAACC,GAClB,IAAKmG,EAAgBnG,EAAhBmG,aACL,OACE,sBAAKR,MAAO,CAAEC,gBAAgB,GAAD,OAAKR,MAAmBS,QAAS,WAC1DM,EAAatF,QAAQ8D,UAAU,CAC7BuB,KAAM,cAFZ,yBAOe,IACZlG,EAAMmG,aAAa7F,MAAMuC,QAAQC,QAC9B,UACA9C,EAAMmG,aAAa7F,MAAMiE,KAAM,IAVrC,kECkBW6B,G,MAvBH,SAACpG,GACX,IAAIqG,EAAUC,EAAM/C,WAAW,YAC/Bc,QAAQC,IAAI+B,GACZ,IAAMtC,EAAW,CACfuC,EAAM/C,WAAW,YACjB+C,EAAM/C,WAAW,YACjBgD,EAAWhD,WAAW,iBAGxB,OACE,cAAC,EAAD,CAASQ,SAAUA,EAAnB,SACE,sBAAKyC,UAAU,MAAf,UACE,yCACA,kEACA,yDACA,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,WCpBRC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.88f1a457.chunk.js","sourcesContent":["/************************************************\r\n * React Diffuse\r\n * @description Global state management solution\r\n * @copyright 2022 RAPMINTS, LLC. All rights reserved.\r\n * @author Kyle Watkins, Paul Scala\r\n * @example https://codesandbox.io/s/wispy-leaf-iyp9k6\r\n ************************************************/\r\nimport React, { useMemo } from 'react'\r\nimport createContext from './createContext'\r\nimport useContextSelector from './useContextSelector'\r\n\r\n// Create diffuse context\r\nconst DiffuseContext = createContext()\r\n\r\nconst useFuse = (fuseName) => {\r\n  return useContextSelector(DiffuseContext, cntxt => cntxt[fuseName])\r\n}\r\n\r\n/**\r\n * Wires component to a specified fuse\r\n * @param {object} properties\r\n * @param {string} properties.fuseName Fuse to reference\r\n * @param {Component} properties.component Component to reference\r\n * @returns Wired component\r\n */\r\nconst wire =\r\n  ({ fuseName = [], Child }) =>\r\n  (props) => {\r\n    // Use diffusion context\r\n    const fuses = {}\r\n    const memoConstraint = []\r\n    for (let i = 0; i < fuseName.length; i++) {\r\n      let context = useFuse(fuseName[i])\r\n      fuses[fuseName[i]] = context\r\n      memoConstraint.push(context.store)\r\n    }\r\n\r\n    // Set up memoization\r\n    return useMemo(\r\n      () => <Child {...fuses} {...props} />,\r\n      [props, ...memoConstraint]\r\n    )\r\n  }\r\n\r\n/**\r\n * Reduce\r\n * @param {object} reducer Reducer\r\n * @param {object} initialState Initial state\r\n * @param {object} actions Actions\r\n */\r\nconst Reduce = ({\r\n  reducer,\r\n  initialState,\r\n  middleware,\r\n  asyncReducer = null,\r\n  actions,\r\n  asyncActions\r\n}) => {\r\n  // Create initial dispatch\r\n  const [state, dispatch] = React.useReducer(\r\n    (state, action) => action.store,\r\n    initialState\r\n  )\r\n\r\n  // Create enhanced dispatch\r\n  const enhancedDispatch = (newAction) => {\r\n    const res = reducer(newAction.store, newAction)\r\n    if (newAction.store !== res) {\r\n      newAction.store = res\r\n    }\r\n\r\n    dispatch(newAction)\r\n    return res\r\n  }\r\n\r\n  // Create enhanced async dispatch\r\n  const enhancedAsyncDispatch = async (newAction) => {\r\n    return (\r\n      await asyncReducer(newAction, onSuccess, onFail, onProgress, onLoading)\r\n    ).store\r\n  }\r\n\r\n  // Initialize Default Loading Function\r\n  const onLoading = () => {\r\n    return dispatchWithMiddleWare({ type: 'LOADING' })\r\n  }\r\n\r\n  // Initialize Default Success Function\r\n  const onSuccess = (payload) => {\r\n    return dispatchWithMiddleWare({ type: 'SUCCESS', payload })\r\n  }\r\n\r\n  // Initialize Default Fail Function\r\n  const onFail = (payload) => {\r\n    return dispatchWithMiddleWare({ type: 'FAIL', payload })\r\n  }\r\n\r\n  // Initialize Default Progress functions\r\n  const onProgress = (payload) => {\r\n    return dispatchWithMiddleWare({ type: 'PROGRESS', payload })\r\n  }\r\n\r\n  // Dispatch with middleware\r\n  const dispatchWithMiddleWare = async (action) => {\r\n    // Set new action from action passed through dispatch\r\n    let newAction = action\r\n\r\n    // If store is not defined in action set it\r\n    if (newAction.store === undefined) {\r\n      newAction.store = state\r\n    }\r\n\r\n    // If before ware is available run it\r\n    if (middleware && middleware.beforeWare) {\r\n      middleware.beforeWare.forEach((beforeWare) => {\r\n        beforeWare(newAction)\r\n      })\r\n    }\r\n\r\n    // Async actions are available and the current action is async\r\n    if (\r\n      asyncReducer !== null &&\r\n      Object.keys(asyncActions).includes(newAction.type)\r\n    ) {\r\n      // Get new store from dispatch\r\n      const newStore = await enhancedAsyncDispatch(newAction)\r\n\r\n      // Set new action with new store\r\n      newAction = { ...newAction, store: { ...newStore } }\r\n    } else {\r\n      // Get new store from dispatch\r\n      const newStore = { ...enhancedDispatch(newAction) }\r\n\r\n      // Set new action with new store\r\n      newAction = { ...newAction, store: { ...newStore } }\r\n    }\r\n\r\n    // If afterWare is available run it\r\n    if (middleware && middleware.afterWare) {\r\n      middleware.afterWare.forEach((afterWare) => {\r\n        afterWare(newAction)\r\n      })\r\n    }\r\n\r\n    // Return new action\r\n    return newAction\r\n  }\r\n\r\n  let actionsDispatch = () => {\r\n    let actionKeys = Object.keys(actions)\r\n    let asyncActionKeys = Object.keys(asyncActions)\r\n    let actionDispatch = {}\r\n    actionKeys.map((a)=> {\r\n      actionDispatch[a] = (payload) => dispatchWithMiddleWare({type: a, payload: payload})\r\n    })\r\n\r\n    asyncActionKeys.map((a)=>{\r\n      actionDispatch[a] = (payload) => dispatchWithMiddleWare({type: a, payload: payload})\r\n    })\r\n\r\n    return actionDispatch\r\n  }\r\n  // Return state as store and dispatch as dispatch middleware\r\n  const value = {\r\n    /**\r\n     * Current state of reducer\r\n     * @type object\r\n     */\r\n    store: state,\r\n    /**\r\n     * @deprecated Use actions instead\r\n     */\r\n    dispatch: dispatchWithMiddleWare,\r\n    /**\r\n     * Dispatch actions for reducer\r\n     * @type object\r\n     */\r\n    actions: actionsDispatch()\r\n  }\r\n\r\n  return value\r\n}\r\n\r\n/**\r\n *\r\n * @param {object[]} values\r\n */\r\nconst MergeReducers = (globalState = []) => {\r\n  // Reduce each state into reducers\r\n  const reducers = globalState.map((state) => {\r\n    return {\r\n      [state.name]: () =>{\r\n        const reducer = Reduce({\r\n          reducer: state.reducer,\r\n          initialState: state.initialState,\r\n          middleware: state.middleware,\r\n          asyncReducer: state.asyncReducer,\r\n          actions: state.actions,\r\n          asyncActions: state.asyncActions\r\n        })\r\n        return reducer\r\n      }\r\n    }\r\n  })\r\n\r\n  // Initialize merged reducers\r\n  const mergedReducers = []\r\n\r\n  // Merge reducers into an array\r\n  reducers.map((r) => {\r\n    Object.keys(r).map((key) => {\r\n      mergedReducers.push(r[key])\r\n    })\r\n  })\r\n\r\n  return reducers\r\n}\r\n\r\n/**\r\n * Creates a reducer\r\n * @param {object} initialState Initial reducer state\r\n * @param {object} actions Key value pair of functions\r\n */\r\nconst createReducer = ({\r\n  initialState = {},\r\n  actions = [],\r\n  middleware = { beforeWare: [], afterWare: [] },\r\n  asyncActions = null\r\n}) => {\r\n  // Reducer\r\n  const reducer = {\r\n    initialState: {\r\n      diffuse: {\r\n        loading: false,\r\n        error: false\r\n      },\r\n      ...initialState\r\n    },\r\n    actionsDict: {\r\n      INITIALIZE_STORE: (state, payload = {}) => {\r\n        return {\r\n          diffuse: {\r\n            loading: false,\r\n            error: false\r\n          },\r\n          ...initialState,\r\n          ...payload\r\n        }\r\n      },\r\n      LOADING: (state) => {\r\n        return {\r\n          diffuse: {\r\n            loading: true,\r\n            error: false\r\n          }\r\n        }\r\n      },\r\n      SUCCESS: (state, payload) => {\r\n        return {\r\n          diffuse: {\r\n            loading: false,\r\n            error: false\r\n          },\r\n          ...payload\r\n        }\r\n      },\r\n      PROGRESS: (state, payload) => {\r\n        return {\r\n          ...payload\r\n        }\r\n      },\r\n      FAIL: (state, payload) => {\r\n        return {\r\n          diffuse: {\r\n            loading: false,\r\n            error: true\r\n          },\r\n          ...payload\r\n        }\r\n      }\r\n    },\r\n    asyncActionsDict: {},\r\n    middleware: middleware,\r\n    // Initialized reducer function\r\n    initialize: (name) => ({\r\n      name: name,\r\n      initialState: { ...reducer.initialState },\r\n      reducer: reducer.reducer,\r\n      middleware: middleware,\r\n      asyncReducer: reducer.asyncReducer,\r\n      actions: reducer.actionsDict,\r\n      asyncActions: reducer.asyncActionsDict\r\n    }),\r\n    reducer: (state, action) => {\r\n      // If action exist in dictionary run the action and return the value\r\n      if (action.type in reducer.actionsDict) {\r\n        const res = reducer.actionsDict[action.type](state, action.payload)\r\n        return {\r\n          ...state,\r\n          ...res\r\n        }\r\n      }\r\n    },\r\n    asyncReducer: async (action, onSuccess, onFail, onProgress, onLoading) => {\r\n      onLoading()\r\n      return {\r\n        ...(await reducer.asyncActionsDict[action.type]({\r\n            state: action.store,\r\n            payload: action.payload\r\n          },\r\n          onSuccess,\r\n          onFail,\r\n          onProgress\r\n        )),\r\n        type: action.type\r\n      }\r\n    },\r\n    addAction: (actionName, action) => {\r\n      // Add regular action\r\n      if (action.type === 'action') {\r\n        reducer.actionsDict[actionName] = action.job\r\n      }\r\n      // Add async action\r\n      else if (action.type === 'async') {\r\n        reducer.asyncActionsDict[actionName] = action.job\r\n      }\r\n    },\r\n    removeAction: (actionName) => {\r\n      // Remove action by name\r\n      if (actionName in reducer.actionsDict) {\r\n        delete reducer.actionsDict[actionName]\r\n      }\r\n    },\r\n    getActions: () => {\r\n      // Init actions array\r\n      const actions = []\r\n\r\n      // For each action push to array\r\n      for (const key in reducer.actionsDict) {\r\n        actions.push(reducer.actionsDict[key])\r\n      }\r\n\r\n      // return actions\r\n      return actions\r\n    }\r\n  }\r\n\r\n  // Add actions to dictionary\r\n  for (const key in actions) {\r\n    reducer.addAction(key, actions[key])\r\n  }\r\n\r\n  return reducer\r\n}\r\n/**\r\n * Diffuse Provider\r\n * @param {object} properties Properties for Diffusion\r\n * @param {Component} properties.children Main App\r\n */\r\nconst Diffuse = ({ reducers, children }) => {\r\n  // Merge reducers from global state\r\n  const mergedReducers = MergeReducers(reducers)\r\n\r\n  // Init Fuse\r\n  const values = {}\r\n\r\n  \r\n\r\n  // Initialize fuses\r\n  for (let i = 0; i < mergedReducers.length; i++) {\r\n    let keys = Object.keys(mergedReducers[i])[0]\r\n    values[keys] = mergedReducers[i][keys]()\r\n  }\r\n\r\n  // Return diffusion provider\r\n  return (\r\n    <DiffuseContext.Provider value={values}>{children}</DiffuseContext.Provider>\r\n  )\r\n}\r\n\r\nexport { wire, createReducer, useFuse }\r\n\r\nexport default Diffuse\r\n","import React, {\r\n    createContext as createContextOriginal,\r\n    useEffect,\r\n    useRef\r\n  } from \"react\";\r\n  \r\nexport const ORIGINAL_PROVIDER = Symbol();\r\n\r\nfunction createProvider(ProviderOriginal) {\r\n    return ({ value, children }) => {\r\n        const valueRef = useRef(value);\r\n        const listenersRef = useRef(new Set());\r\n        const contextValue = useRef({\r\n        value: valueRef,\r\n        registerListener: (listener) => {\r\n            listenersRef.current.add(listener);\r\n            return () => listenersRef.current.delete(listener);\r\n        },\r\n        listeners: new Set()\r\n        });\r\n\r\n        useEffect(() => {\r\n        valueRef.current = value;\r\n        listenersRef.current.forEach((listener) => {\r\n            listener(value);\r\n        });\r\n        }, [value]);\r\n\r\n        return (\r\n        <ProviderOriginal value={contextValue.current}>\r\n            {children}\r\n        </ProviderOriginal>\r\n        );\r\n    };\r\n}\r\n\r\nexport default function createContext(defaultValue) {\r\nconst context = createContextOriginal({\r\n    value: {\r\n        current: defaultValue\r\n    },\r\n    register: () => {\r\n        return () => {};\r\n    }\r\n});\r\n\r\ndelete context.Consumer;\r\n\r\ncontext.Provider = createProvider(context.Provider);\r\n\r\nreturn context;\r\n}\r\n  ","import { useContext, useEffect, useRef, useState } from \"react\";\r\n\r\nexport default function useContextSelector(context, selector) {\r\n  const { value, registerListener } = useContext(context);\r\n  const selectorRef = useRef(selector);\r\n  const [selectedValue, setSelectedValue] = useState(() =>\r\n    selector(value.current)\r\n  );\r\n\r\n  useEffect(() => {\r\n    selectorRef.current = selector;\r\n  });\r\n\r\n  useEffect(() => {\r\n    const updateValueIfNeeded = (newValue) => {\r\n      const newSelectedValue = selectorRef.current(newValue);\r\n      setSelectedValue(() => newSelectedValue);\r\n    };\r\n\r\n    const unregisterListener = registerListener(updateValueIfNeeded);\r\n\r\n    return unregisterListener;\r\n  }, [registerListener, value]);\r\n\r\n  return selectedValue;\r\n}\r\n","export default (name) => (action) => {\r\n  console.log(name, action.type, action.store);\r\n};\r\n","import { createReducer } from \"react-diffuse\";\r\nimport logger from \"./middlewares/logger\";\r\n\r\nconst reducer = createReducer({\r\n  initialState: { item: 0 },\r\n  actions: {\r\n    INCREMENT: {\r\n      type: \"action\",\r\n      job: (state, payload) => {\r\n        console.log(payload)\r\n        return {\r\n          item: state.item + 1\r\n        };\r\n      }\r\n    },\r\n    DECREMENT: {\r\n      type: \"action\",\r\n      job: (state) => {\r\n        return {\r\n          item: state.item - 1\r\n        };\r\n      }\r\n    }\r\n  },\r\n  middleware: {\r\n    afterWare: [logger(\"after\")],\r\n    beforeWare: [logger(\"before\")]\r\n  }\r\n});\r\n\r\nexport default reducer;\r\n","import { createReducer } from \"react-diffuse\";\r\nimport logger from \"./middlewares/logger\";\r\nimport axios from \"axios\";\r\n\r\nconst reducer = createReducer({\r\n  initialState: {\r\n    item: 0\r\n  },\r\n  actions: {\r\n    INCREMENT: {\r\n      type: \"action\",\r\n      job: (state, payload) => {\r\n        return {\r\n          item: state.item + 1\r\n        };\r\n      }\r\n    },\r\n    DECREMENT: {\r\n      type: \"action\",\r\n      job: (state) => {\r\n        return {\r\n          item: state.item - 1\r\n        };\r\n      }\r\n    },\r\n    GET_COUNT: {\r\n      type: \"async\",\r\n      job: async ({state, payload}, onSuccess, onFail, onProgress) => {\r\n        try {\r\n          console.log(payload)\r\n          // Replace the url with your own on beeceptor\r\n          let ApiRes = await axios\r\n            .get(\"https://diffusenew.free.beeceptor.com\")\r\n            .then(\r\n              (value) =>\r\n                new Promise((resolve) => {\r\n                  setTimeout(() => {\r\n                    resolve(value);\r\n                  }, 1000);\r\n                })\r\n            );\r\n\r\n          return onSuccess({ item: state.item + 1 });\r\n        } catch (e) {\r\n          onFail({ error: e.message });\r\n        }\r\n      }\r\n    }\r\n  },\r\n  middleware: {\r\n    afterWare: [logger(\"after\")],\r\n    beforeWare: [logger(\"before\")]\r\n  }\r\n});\r\n\r\nexport default reducer;\r\n","export const AReducer = \"AReducer\";\r\nexport const BReducer = \"BReducer\";\r\nexport const AsyncReducer = \"AsyncReducer\";\r\n","/* eslint-disable react/react-in-jsx-scope */\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { wire } from \"react-diffuse\";\r\nimport { AReducer } from \"./StateManagement/States\";\r\n\r\nfunction randomColor() {\r\n  const letters = \"0123456789ABCDEF\";\r\n  let color = \"#\";\r\n  for (let i = 0; i < 6; i++) color += letters[Math.floor(Math.random() * 16)];\r\n  return color;\r\n}\r\n\r\nconst Text2 = (props) => {\r\n  const [state, setState] = useState(0);\r\n\r\n  return (\r\n    <div\r\n      style={{ backgroundColor: `${randomColor()}` }}\r\n      onClick={(e) => {\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n        let newState = state + 1;\r\n        setState(newState);\r\n      }}\r\n    >\r\n      Text2: {state} Rerender on click from Text\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Text = (props) => {\r\n  return (\r\n    <div\r\n      style={{ backgroundColor: `${randomColor()}` }}\r\n      onClick={() =>\r\n        props.AReducer.dispatch({\r\n          type: \"INCREMENT\"\r\n        })\r\n      }\r\n    >\r\n      Text: {props.AReducer.store.item} Times clicked! Color changes on click\r\n      from Text\r\n      <Text2 />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default wire({ fuseName: [AReducer], Child: Text });\r\n","import React from 'react'\r\nimport { wire } from \"react-diffuse\";\r\nimport { AReducer, BReducer } from \"./StateManagement/States\";\r\nfunction randomColor() {\r\n  const letters = \"0123456789ABCDEF\";\r\n  let color = \"#\";\r\n  for (let i = 0; i < 6; i++) color += letters[Math.floor(Math.random() * 16)];\r\n  return color;\r\n}\r\n\r\nconst Number = (props) => {\r\n  let {BReducer} = props\r\n  return (\r\n    <div\r\n      style={{ backgroundColor: `${randomColor()}` }}\r\n      onClick={() =>\r\n        BReducer.actions.INCREMENT({test: \"PAYLOAD\"})\r\n      }\r\n    >\r\n      Number: {props.BReducer.store.item} Times clicked! Color changes on click\r\n      from Number or Text\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default wire({\r\n  fuseName: [BReducer, AReducer],\r\n  Child: Number\r\n});\r\n","import React from 'react'\r\nimport { wire } from \"react-diffuse\";\r\nimport { AsyncReducer } from \"./StateManagement/States\";\r\n\r\nfunction randomColor() {\r\n  const letters = \"0123456789ABCDEF\";\r\n  let color = \"#\";\r\n  for (let i = 0; i < 6; i++) color += letters[Math.floor(Math.random() * 16)];\r\n  return color;\r\n}\r\n\r\nconst CountAsync = (props) => {\r\n  let {AsyncReducer} = props\r\n  return (\r\n    <div style={{ backgroundColor: `${randomColor()}` }} onClick={() => {\r\n        AsyncReducer.actions.GET_COUNT({\r\n          test: \"SomeText\"\r\n        })\r\n      }\r\n      }\r\n    >\r\n      NumberAsync:{\" \"}\r\n      {props.AsyncReducer.store.diffuse.loading\r\n        ? \"loading\"\r\n        : props.AsyncReducer.store.item}{\" \"}\r\n      Times clicked! Color changes on click from Number or Text\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default wire({\r\n  fuseName: [AsyncReducer],\r\n  Child: CountAsync\r\n});\r\n","import React from 'react'\r\nimport Diffuse from 'react-diffuse'\r\nimport count from './StateManagement/count'\r\nimport asyncCount from './StateManagement/asyncCount'\r\nimport Text from './Text'\r\nimport Number from './Number'\r\nimport CountAsync from './CountAsync'\r\nimport './styles.css'\r\n\r\nconst App = (props) => {\r\n  let Reducer = count.initialize('AReducer')\r\n  console.log(Reducer)\r\n  const reducers = [\r\n    count.initialize('AReducer'),\r\n    count.initialize('BReducer'),\r\n    asyncCount.initialize('AsyncReducer')\r\n  ]\r\n\r\n  return (\r\n    <Diffuse reducers={reducers}>\r\n      <div className=\"App\">\r\n        <h1>DIFFUSE</h1>\r\n        <h2>Global state management solution</h2>\r\n        <h4>Color change = Rerender</h4>\r\n        <Number />\r\n        <Text />\r\n        <CountAsync/>\r\n      </div>\r\n    </Diffuse>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import './index.css'\r\n\r\nimport React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n"],"sourceRoot":""}