{"version":3,"sources":["../../src/index.js","StateManagement/middlewares/logger.js","StateManagement/count.js","StateManagement/asyncCount.js","Text.js","StateManagement/States.js","Number.js","CountAsync.js","App.js","index.js"],"names":["DiffuseContext","React","createContext","wire","fuseName","Child","props","context","useContext","fuses","memoConstraint","i","length","push","store","useMemo","Reduce","reducer","initialState","middleware","asyncReducer","asyncActions","useReducer","state","action","dispatch","onLoading","dispatchWithMiddleWare","type","onSuccess","payload","onFail","onProgress","afterWare","forEach","newAction","undefined","beforeWare","Object","keys","includes","_asyncReducer","enhancedAsyncDispatch","newStore","res","enhancedDispatch","createReducer","actions","diffuse","loading","error","actionsDict","LOADING","SUCCESS","PROGRESS","FAIL","asyncActionsDict","initialize","name","addAction","actionName","job","removeAction","getActions","key","reducers","children","mergedReducers","globalState","map","r","MergeReducers","values","Provider","value","console","log","item","INCREMENT","DECREMENT","logger","GET_COUNT","axios","get","then","Promise","resolve","setTimeout","message","randomColor","color","Math","floor","random","Text2","useState","setState","style","backgroundColor","onClick","e","stopPropagation","preventDefault","AReducer","BReducer","AsyncReducer","test","App","Reducer","count","asyncCount","className","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.767c6a85.chunk.js","sourcesContent":["/************************************************\n * React Diffuse\n * @description Global state management solution\n * @copyright 2022 RAPMINTS, LLC. All rights reserved.\n * @author Kyle Watkins, Paul Scala\n * @example https://codesandbox.io/s/wispy-leaf-iyp9k6\n ************************************************/\nimport React, { useContext, useMemo } from 'react'\n\n// Create diffuse context\nconst DiffuseContext = React.createContext()\n\n/**\n * Wires component to a specified fuse\n * @param {object} properties\n * @param {string} properties.fuseName Fuse to reference\n * @param {Component} properties.component Component to reference\n * @returns Wired component\n */\nconst wire =\n  ({ fuseName = [], Child }) =>\n  (props) => {\n    // Use diffusion context\n    const context = useContext(DiffuseContext)\n    const fuses = {}\n    const memoConstraint = []\n    for (let i = 0; i < fuseName.length; i++) {\n      fuses[fuseName[i]] = context[fuseName[i]]\n      memoConstraint.push(context[fuseName[i]].store)\n    }\n\n    // Set up memoization\n    return useMemo(\n      () => <Child {...fuses} {...props} />,\n      [props, ...memoConstraint]\n    )\n  }\n\n/**\n * Reduce\n * @param {object} reducer Reducer\n * @param {object} initialState Initial state\n * @param {object} actions Actions\n */\nconst Reduce = ({\n  reducer,\n  initialState,\n  middleware,\n  asyncReducer = null,\n  actions,\n  asyncActions\n}) => {\n  // Create initial dispatch\n  const [state, dispatch] = React.useReducer(\n    (state, action) => action.store,\n    initialState\n  )\n\n  // Create enhanced dispatch\n  const enhancedDispatch = (newAction) => {\n    const res = reducer(newAction.store, newAction)\n    if (newAction.store !== res) {\n      newAction.store = res\n    }\n\n    dispatch(newAction)\n    return res\n  }\n\n  // Create enhanced async dispatch\n  const enhancedAsyncDispatch = async (newAction) => {\n    return (\n      await asyncReducer(newAction, onSuccess, onFail, onProgress, onLoading)\n    ).store\n  }\n\n  // Initialize Default Loading Function\n  const onLoading = () => {\n    return dispatchWithMiddleWare({ type: 'LOADING' })\n  }\n\n  // Initialize Default Success Function\n  const onSuccess = (payload) => {\n    return dispatchWithMiddleWare({ type: 'SUCCESS', payload })\n  }\n\n  // Initialize Default Fail Function\n  const onFail = (payload) => {\n    return dispatchWithMiddleWare({ type: 'FAIL', payload })\n  }\n\n  // Initialize Default Progress functions\n  const onProgress = (payload) => {\n    return dispatchWithMiddleWare({ type: 'PROGRESS', payload })\n  }\n\n  // Dispatch with middleware\n  const dispatchWithMiddleWare = async (action) => {\n    // Set new action from action passed through dispatch\n    let newAction = action\n\n    // If store is not defined in action set it\n    if (newAction.store === undefined) {\n      newAction.store = state\n    }\n\n    // If before ware is available run it\n    if (middleware && middleware.beforeWare) {\n      middleware.beforeWare.forEach((beforeWare) => {\n        beforeWare(newAction)\n      })\n    }\n\n    // Async actions are available and the current action is async\n    if (\n      asyncReducer !== null &&\n      Object.keys(asyncActions).includes(newAction.type)\n    ) {\n      // Get new store from dispatch\n      const newStore = await enhancedAsyncDispatch(newAction)\n\n      // Set new action with new store\n      newAction = { ...newAction, store: { ...newStore } }\n    } else {\n      // Get new store from dispatch\n      const newStore = { ...enhancedDispatch(newAction) }\n\n      // Set new action with new store\n      newAction = { ...newAction, store: { ...newStore } }\n    }\n\n    // If afterWare is available run it\n    if (middleware && middleware.afterWare) {\n      middleware.afterWare.forEach((afterWare) => {\n        afterWare(newAction)\n      })\n    }\n\n    // Return new action\n    return newAction\n  }\n\n  // Return state as store and dispatch as dispatch middleware\n  const value = {\n    store: state,\n    dispatch: dispatchWithMiddleWare\n  }\n\n  return value\n}\n\n/**\n *\n * @param {object[]} values\n */\nconst MergeReducers = (globalState = []) => {\n  // Reduce each state into reducers\n  const reducers = globalState.map((state) => {\n    return {\n      [state.name]: () =>{\n        const reducer = Reduce({\n          reducer: state.reducer,\n          initialState: state.initialState,\n          middleware: state.middleware,\n          asyncReducer: state.asyncReducer,\n          actions: state.actions,\n          asyncActions: state.asyncActions\n        })\n        return reducer\n      }\n    }\n  })\n\n  // Initialize merged reducers\n  const mergedReducers = []\n\n  // Merge reducers into an array\n  reducers.map((r) => {\n    Object.keys(r).map((key) => {\n      mergedReducers.push(r[key])\n    })\n  })\n\n  return reducers\n}\n\n/**\n * Creates a reducer\n * @param {object} initialState Initial reducer state\n * @param {object} actions Key value pair of functions\n */\nconst createReducer = ({\n  initialState = {},\n  actions = [],\n  middleware = { beforeWare: [], afterWare: [] },\n  asyncActions = null\n}) => {\n  // Reducer\n  const reducer = {\n    initialState: {\n      diffuse: {\n        loading: false,\n        error: false\n      },\n      ...initialState\n    },\n    actionsDict: {\n      LOADING: (state) => {\n        return {\n          diffuse: {\n            loading: true,\n            error: false\n          }\n        }\n      },\n      SUCCESS: (state, payload) => {\n        return {\n          diffuse: {\n            loading: false,\n            error: false\n          },\n          ...payload\n        }\n      },\n      PROGRESS: (state, payload) => {\n        return {\n          ...payload\n        }\n      },\n      FAIL: (state, payload) => {\n        return {\n          diffuse: {\n            loading: false,\n            error: true\n          },\n          ...payload\n        }\n      }\n    },\n    asyncActionsDict: {},\n    middleware: middleware,\n    // Initialized reducer function\n    initialize: (name) => ({\n      name: name,\n      initialState: { ...reducer.initialState },\n      reducer: reducer.reducer,\n      middleware: middleware,\n      asyncReducer: reducer.asyncReducer,\n      actions: reducer.actionsDict,\n      asyncActions: reducer.asyncActionsDict\n    }),\n    reducer: (state, action) => {\n      // If action exist in dictionary run the action and return the value\n      if (action.type in reducer.actionsDict) {\n        const res = reducer.actionsDict[action.type](state, action.payload)\n        return {\n          ...state,\n          ...res\n        }\n      }\n    },\n    asyncReducer: async (action, onSuccess, onFail, onProgress, onLoading) => {\n      onLoading()\n      return {\n        ...(await reducer.asyncActionsDict[action.type](\n          action.store,\n          onSuccess,\n          onFail,\n          onProgress\n        )),\n        type: action.type\n      }\n    },\n    addAction: (actionName, action) => {\n      // Add regular action\n      if (action.type === 'action') {\n        reducer.actionsDict[actionName] = action.job\n      }\n      // Add async action\n      else if (action.type === 'async') {\n        reducer.asyncActionsDict[actionName] = action.job\n      }\n    },\n    removeAction: (actionName) => {\n      // Remove action by name\n      if (actionName in reducer.actionsDict) {\n        delete reducer.actionsDict[actionName]\n      }\n    },\n    getActions: () => {\n      // Init actions array\n      const actions = []\n\n      // For each action push to array\n      for (const key in reducer.actionsDict) {\n        actions.push(reducer.actionsDict[key])\n      }\n\n      // return actions\n      return actions\n    }\n  }\n\n  // Add actions to dictionary\n  for (const key in actions) {\n    reducer.addAction(key, actions[key])\n  }\n\n  return reducer\n}\n/**\n * Diffuse Provider\n * @param {object} properties Properties for Diffusion\n * @param {Component} properties.children Main App\n */\nconst Diffuse = ({ reducers, children }) => {\n  // Merge reducers from global state\n  const mergedReducers = MergeReducers(reducers)\n\n  // Init Fuse\n  const values = {}\n\n  \n\n  // Initialize fuses\n  for (let i = 0; i < mergedReducers.length; i++) {\n    let keys = Object.keys(mergedReducers[i])[0]\n    values[keys] = mergedReducers[i][keys]()\n  }\n\n  // Return diffusion provider\n  return (\n    <DiffuseContext.Provider value={values}>{children}</DiffuseContext.Provider>\n  )\n}\n\nexport { wire, createReducer }\n\nexport default Diffuse\n","export default (name) => (action) => {\r\n  console.log(name, action.type, action.store);\r\n};\r\n","import { createReducer } from \"react-diffuse\";\r\nimport logger from \"./middlewares/logger\";\r\n\r\nconst reducer = createReducer({\r\n  initialState: { item: 0 },\r\n  actions: {\r\n    INCREMENT: {\r\n      type: \"action\",\r\n      job: (state) => {\r\n        return {\r\n          item: state.item + 1\r\n        };\r\n      }\r\n    },\r\n    DECREMENT: {\r\n      type: \"action\",\r\n      job: (state) => {\r\n        return {\r\n          item: state.item - 1\r\n        };\r\n      }\r\n    }\r\n  },\r\n  middleware: {\r\n    afterWare: [logger(\"after\")],\r\n    beforeWare: [logger(\"before\")]\r\n  }\r\n});\r\n\r\nexport default reducer;\r\n","import { createReducer } from \"react-diffuse\";\r\nimport logger from \"./middlewares/logger\";\r\nimport axios from \"axios\";\r\n\r\nconst reducer = createReducer({\r\n  initialState: {\r\n    item: 0\r\n  },\r\n  actions: {\r\n    INCREMENT: {\r\n      type: \"action\",\r\n      job: (state) => {\r\n        return {\r\n          item: state.item + 1\r\n        };\r\n      }\r\n    },\r\n    DECREMENT: {\r\n      type: \"action\",\r\n      job: (state) => {\r\n        return {\r\n          item: state.item - 1\r\n        };\r\n      }\r\n    },\r\n    GET_COUNT: {\r\n      type: \"async\",\r\n      job: async (state, onSuccess, onFail, onProgress) => {\r\n        try {\r\n          // Replace the url with your own on beeceptor\r\n          let ApiRes = await axios\r\n            .get(\"https://diffusenew.free.beeceptor.com\")\r\n            .then(\r\n              (value) =>\r\n                new Promise((resolve) => {\r\n                  setTimeout(() => {\r\n                    resolve(value);\r\n                  }, 1000);\r\n                })\r\n            );\r\n\r\n          return onSuccess({ item: state.item + 1 });\r\n        } catch (e) {\r\n          onFail({ error: e.message });\r\n        }\r\n      }\r\n    }\r\n  },\r\n  middleware: {\r\n    afterWare: [logger(\"after\")],\r\n    beforeWare: [logger(\"before\")]\r\n  }\r\n});\r\n\r\nexport default reducer;\r\n","/* eslint-disable react/react-in-jsx-scope */\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { wire } from \"react-diffuse\";\r\nimport { AReducer } from \"./StateManagement/States\";\r\n\r\nfunction randomColor() {\r\n  const letters = \"0123456789ABCDEF\";\r\n  let color = \"#\";\r\n  for (let i = 0; i < 6; i++) color += letters[Math.floor(Math.random() * 16)];\r\n  return color;\r\n}\r\n\r\nconst Text2 = (props) => {\r\n  const [state, setState] = useState(0);\r\n\r\n  return (\r\n    <div\r\n      style={{ backgroundColor: `${randomColor()}` }}\r\n      onClick={(e) => {\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n        let newState = state + 1;\r\n        setState(newState);\r\n      }}\r\n    >\r\n      Text2: {state} Rerender on click from Text\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Text = (props) => {\r\n  return (\r\n    <div\r\n      style={{ backgroundColor: `${randomColor()}` }}\r\n      onClick={() =>\r\n        props.AReducer.dispatch({\r\n          type: \"INCREMENT\"\r\n        })\r\n      }\r\n    >\r\n      Text: {props.AReducer.store.item} Times clicked! Color changes on click\r\n      from Text\r\n      <Text2 />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default wire({ fuseName: [AReducer], Child: Text });\r\n","export const AReducer = \"AReducer\";\r\nexport const BReducer = \"BReducer\";\r\nexport const AsyncReducer = \"AsyncReducer\";\r\n","import React from 'react'\r\nimport { wire } from \"react-diffuse\";\r\nimport { AReducer, BReducer } from \"./StateManagement/States\";\r\nfunction randomColor() {\r\n  const letters = \"0123456789ABCDEF\";\r\n  let color = \"#\";\r\n  for (let i = 0; i < 6; i++) color += letters[Math.floor(Math.random() * 16)];\r\n  return color;\r\n}\r\n\r\nconst Number = (props) => {\r\n  return (\r\n    <div\r\n      style={{ backgroundColor: `${randomColor()}` }}\r\n      onClick={() =>\r\n        props.BReducer.dispatch({\r\n          type: \"INCREMENT\"\r\n        })\r\n      }\r\n    >\r\n      Number: {props.BReducer.store.item} Times clicked! Color changes on click\r\n      from Number or Text\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default wire({\r\n  fuseName: [BReducer, AReducer],\r\n  Child: Number\r\n});\r\n","import React from 'react'\r\nimport { wire } from \"react-diffuse\";\r\nimport { AsyncReducer } from \"./StateManagement/States\";\r\n\r\nfunction randomColor() {\r\n  const letters = \"0123456789ABCDEF\";\r\n  let color = \"#\";\r\n  for (let i = 0; i < 6; i++) color += letters[Math.floor(Math.random() * 16)];\r\n  return color;\r\n}\r\n\r\nconst CountAsync = (props) => {\r\n  return (\r\n    <div style={{ backgroundColor: `${randomColor()}` }} onClick={() => {\r\n        props.AsyncReducer.dispatch({\r\n          type: \"GET_COUNT\",\r\n          payload: {\r\n            test: \"SomeText\"\r\n          }\r\n        })\r\n      }\r\n      }\r\n    >\r\n      NumberAsync:{\" \"}\r\n      {props.AsyncReducer.store.diffuse.loading\r\n        ? \"loading\"\r\n        : props.AsyncReducer.store.item}{\" \"}\r\n      Times clicked! Color changes on click from Number or Text\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default wire({\r\n  fuseName: [AsyncReducer],\r\n  Child: CountAsync\r\n});\r\n","import React from 'react'\nimport Diffuse from 'react-diffuse'\nimport count from './StateManagement/count'\nimport asyncCount from './StateManagement/asyncCount'\nimport Text from './Text'\nimport Number from './Number'\nimport CountAsync from './CountAsync'\nimport './styles.css'\n\nconst App = (props) => {\n  let Reducer = count.initialize('AReducer')\n  console.log(Reducer)\n  const reducers = [\n    count.initialize('AReducer'),\n    count.initialize('BReducer'),\n    asyncCount.initialize('AsyncReducer')\n  ]\n\n  return (\n    <Diffuse reducers={reducers}>\n      <div className=\"App\">\n        <h1>DIFFUSE</h1>\n        <h2>Global state management solution</h2>\n        <h4>Color change = Rerender</h4>\n        <Number />\n        <Text />\n        <CountAsync/>\n      </div>\n    </Diffuse>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}