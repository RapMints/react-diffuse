{"version":3,"file":"index.js","sources":["../src/ts/createContext.tsx","../src/ts/useReducer.tsx","../src/ts/useContextSelector.tsx","../src/ts/SetupDiffuse.ts","../src/ts/index.tsx"],"sourcesContent":["import React, {\r\n  createContext as createContextOriginal,\r\n  useEffect,\r\n  useRef\r\n} from 'react'\r\n\r\nexport const ORIGINAL_PROVIDER = Symbol()\r\n\r\nconst CONTEXT_VALUE = Symbol();\r\n\r\nexport interface Value {\r\n  value: GlobalStateContext\r\n  registerListener: Function\r\n  listeners: Set<Listener>\r\n}\r\n\r\nexport interface GlobalStateContext {\r\n  state?: Object\r\n  dispatch?: Function\r\n  reducerUpdated?: string | undefined\r\n}\r\n\r\nexport interface Listener {\r\n  fuse: string\r\n  shouldUpdate: Function\r\n}\r\n\r\nexport interface Context<Value> {\r\n  Provider: React.ComponentType<{ value: Value; children: React.ReactNode }>;\r\n  displayName?: string;\r\n}\r\n\r\nexport interface ProviderProps {\r\n  value: GlobalStateContext\r\n  children: React.ReactNode\r\n}\r\n\r\nexport type Version = number;\r\n\r\ntype ContextValue<Value> = {\r\n    /* \"v\"alue     */ value: React.MutableRefObject<Value>;\r\n    /* \"l\"isteners */ listener?: Set<Listener>;\r\n    /* register    */ register: () => () => void\r\n}\r\n\r\nfunction createProvider<Value>(ProviderOriginal) {\r\n  return ({ value, children }: { value: GlobalStateContext; children: React.ReactNode }) => {\r\n    const valueRef = useRef(value)\r\n    const listenersRef = useRef(new Set())\r\n    const contextValue = useRef({\r\n      value: valueRef,\r\n      registerListener: (listener: Listener) => {\r\n        listenersRef.current.add(listener)\r\n        return () => listenersRef.current.delete(listener)\r\n      },\r\n      listeners: new Set()\r\n    })\r\n  \r\n    useEffect(() => {\r\n      valueRef.current = value\r\n      listenersRef.current.forEach((listener: Listener) => {\r\n        // Update listener where fuse name matches the reducer update\r\n        if (listener !== undefined && listener.fuse === value.reducerUpdated) {\r\n          listener.shouldUpdate(value)\r\n        }\r\n      })\r\n    }, [value])\r\n\r\n    return (\r\n      <ProviderOriginal value={contextValue.current}>\r\n        {children}\r\n      </ProviderOriginal>\r\n    )\r\n  }\r\n}\r\n\r\nexport default function createContext<Value>(defaultValue?: Value) {\r\n  const context = createContextOriginal<ContextValue<Value|undefined>>({\r\n    value: {\r\n      current: defaultValue\r\n    },\r\n    register: () => () => {}\r\n  })\r\n\r\n  delete (context as any).Consumer;\r\n\r\n  (context as unknown as Context<Value>).Provider = createProvider(context.Provider);\r\n\r\n  return context as unknown as Context<Value>\r\n}\r\n","import { GlobalStateContext } from './createContext'\r\nimport React, { useCallback, useRef, useState } from 'react'\r\nimport { GlobalStateMachineType } from './SetupDiffuse'\r\n\r\nfunction useForceUpdate() {\r\n    const [force, forceUpdate] = useState({})\r\n    force\r\n    return forceUpdate\r\n}\r\n\r\nexport function useReducer({reducer = {}, asyncReducer = {}, initialState = {}, middleware = {}, actions = [], asyncActions = []}: GlobalStateMachineType): GlobalStateContext {\r\n    if (reducer === undefined) {\r\n        console.warn('No reducer, use Reducer returned no state or dispatch')\r\n        return {}\r\n    }\r\n\r\n    const forceUpdate = useForceUpdate()\r\n    const state = useRef(initialState)\r\n    const reducerUpdated = useRef()\r\n    const getState = useCallback(() => {\r\n        return state\r\n    }, [state])\r\n\r\n    const onLoading = (reducerName) => () => {\r\n        return setValue(reducerName)({ type: 'LOADING' })\r\n    }\r\n\r\n    const onSuccess = (reducerName) => (payload) => {\r\n        return setValue(reducerName)({ type: 'SUCCESS', payload })\r\n    }\r\n\r\n    const onFail = (reducerName) => (payload) => {\r\n        return setValue(reducerName)({ type: 'FAIL', payload })\r\n    }\r\n\r\n    const onProgress = (reducerName) => (payload) => {\r\n        return setValue(reducerName)({ type: 'PROGRESS', payload })\r\n        // forceUpdate({ ...state.current, [reducerName]: nextState })\r\n    }\r\n\r\n    const setValue = useCallback(\r\n        (reducerName) => async (action) => {\r\n            let noAction = false\r\n\r\n            // Initialize next state\r\n            let nextState = state.current[reducerName]\r\n            let newAction = action\r\n            \r\n            // If store is not defined in action set it\r\n            if (newAction.store === undefined) {\r\n                newAction.store = nextState\r\n            }\r\n\r\n            // Run before ware\r\n            if (middleware?.[reducerName]?.beforeWare !== undefined && middleware[reducerName].beforeWare.length !== 0) {\r\n                middleware?.[reducerName].beforeWare.forEach((beforeWare) => {\r\n                    beforeWare(newAction)\r\n                })\r\n            }\r\n\r\n            // If action is a regular function\r\n            if (actions[reducerName].includes(action.type)) {\r\n                nextState = reducer[reducerName](state.current[reducerName], action)\r\n                newAction.store = nextState\r\n            } \r\n            // If action is asyncronous\r\n            else if (asyncActions[reducerName].includes(action.type)) {\r\n                nextState = await asyncReducer[reducerName](newAction, onSuccess(reducerName), onFail(reducerName), onProgress(reducerName), onLoading(reducerName))\r\n                newAction.store = nextState\r\n            } \r\n            // If action doesn't exist\r\n            else {\r\n                noAction = true\r\n                console.warn('No state change, no update')\r\n            }\r\n\r\n            if (middleware?.[reducerName]?.afterWare !== undefined && middleware[reducerName].afterWare.length !== 0) {\r\n                middleware?.[reducerName].afterWare.forEach((afterWare) => {\r\n                    afterWare(newAction)\r\n                })\r\n            }\r\n\r\n            state.current[reducerName] = nextState\r\n\r\n            // Trigger only if an action was performed\r\n            if (noAction === false) {\r\n                forceUpdate({ ...state.current, [reducerName]: nextState })\r\n            }\r\n            \r\n            reducerUpdated.current = reducerName\r\n            return nextState\r\n        },\r\n        [getState]\r\n    )\r\n\r\n    return {state: state.current, dispatch: setValue, reducerUpdated: reducerUpdated.current}\r\n}\r\n","import { useContext, useEffect, useRef, useState } from 'react'\r\n\r\nexport default function useFuseSelector(context, fuse): Object {\r\n  const { value, registerListener} = useContext(context)\r\n  const selector = (context) => context.state[fuse]\r\n  // We use a state to store the selectedValue\r\n  // It will re-render only if the value changes\r\n  // As you may notice, I lazily initialize the value\r\n  const [selectedValue, setSelectedValue] = useState(() =>\r\n    selector(value.current)\r\n  )\r\n\r\n  const selectorRef = useRef(selector)\r\n\r\n  useEffect(() => {\r\n    // Store the selector function at each render\r\n    // Because maybe the function has changed\r\n    selectorRef.current = selector\r\n  })\r\n\r\n  useEffect(() => {\r\n    \r\n    const updateValueIfNeeded = (newValue) => {\r\n      // Calculate the new selectedValue\r\n      const newSelectedValue = selectorRef.current(newValue)\r\n      // Only update when selected values are not the same\r\n      // React will only re-render if the reference has changed\r\n      // Use the callback to be able to select callback too\r\n      // Otherwise it will the selected callback\r\n      if (selectedValue !== newSelectedValue) {\r\n        setSelectedValue(() => newSelectedValue)\r\n      }\r\n    }\r\n\r\n    const unregisterListener = registerListener({fuse: fuse, shouldUpdate:updateValueIfNeeded})\r\n\r\n    return unregisterListener\r\n  }, [registerListener, value, selectedValue])\r\n  \r\n  return selectedValue\r\n}\r\n\r\nexport function useContextSelector(context, selector) {\r\n  const { value, registerListener } = useContext(context)\r\n  // We use a state to store the selectedValue\r\n  // It will re-render only if the value changes\r\n  // As you may notice, I lazily initialize the value\r\n  const [selectedValue, setSelectedValue] = useState(() =>\r\n    selector(value.current)\r\n  )\r\n  const selectorRef = useRef(selector)\r\n\r\n  useEffect(() => {\r\n    // Store the selector function at each render\r\n    // Because maybe the function has changed\r\n    selectorRef.current = selector\r\n  })\r\n\r\n  useEffect(() => {\r\n    const updateValueIfNeeded = (newValue) => {\r\n      // Calculate the new selectedValue\r\n      const newSelectedValue = selectorRef.current(newValue)\r\n      // Only update when selected values are not the same\r\n      // React will only re-render if the reference has changed\r\n      // Use the callback to be able to select callback too\r\n      // Otherwise it will the selected callback\r\n      if (selectedValue !== newSelectedValue) {\r\n        setSelectedValue(() => newSelectedValue)\r\n      }\r\n    }\r\n\r\n    const unregisterListener = registerListener({shouldUpdate:updateValueIfNeeded})\r\n\r\n    return unregisterListener\r\n  }, [registerListener, value, selectedValue])\r\n\r\n  return selectedValue\r\n}","export interface GlobalStateMachineType {\r\n    initialState: Object\r\n    reducer: Object\r\n    asyncReducer: Object\r\n    middleware: Object\r\n    actions: Object\r\n    asyncActions: Object\r\n}\r\n/**\r\n * Diffuse setup class\r\n */\r\n class setupDiffuseClass {\r\n    globalStateMachine: GlobalStateMachineType\r\n\r\n    constructor() {\r\n        this.globalStateMachine = {\r\n            initialState: {},\r\n            reducer: {},\r\n            asyncReducer: {},\r\n            actions: {},\r\n            asyncActions: {},\r\n            middleware: {}\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create global state\r\n     * @param {object[]} reducers Initialized reducers \r\n     * @returns Store\r\n     */\r\n    createGlobalState(reducers): GlobalStateMachineType {\r\n        const initialState = {}\r\n        const reducer = {}\r\n        const asyncReducer = {}\r\n        const middleware = {}\r\n        const actions = {}\r\n        const asyncActions = {}\r\n        reducers.map((singleReducer) => {\r\n            initialState[singleReducer.name] = singleReducer.initialState\r\n            reducer[singleReducer.name] = singleReducer.reducer\r\n            asyncReducer[singleReducer.name] = singleReducer.asyncReducer\r\n            middleware[singleReducer.name] = singleReducer.middleware\r\n            actions[singleReducer.name] = Object.keys(singleReducer.actions)\r\n            asyncActions[singleReducer.name] = Object.keys(singleReducer.asyncActions)\r\n        })\r\n\r\n        const globalStateMachine = {\r\n            initialState: initialState,\r\n            reducer: reducer,\r\n            asyncReducer: asyncReducer,\r\n            middleware: middleware,\r\n            actions: actions,\r\n            asyncActions: asyncActions\r\n        }\r\n\r\n        this.globalStateMachine = globalStateMachine\r\n\r\n        return globalStateMachine\r\n    }\r\n}\r\n\r\n// Setup singleton class\r\nexport default new setupDiffuseClass()","/************************************************\r\n * React Diffuse\r\n * @description Global state management solution\r\n * @copyright 2022 RAPMINTS, LLC. All rights reserved.\r\n * @author Kyle Watkins, Paul Scala\r\n * @example https://codesandbox.io/s/wispy-leaf-iyp9k6\r\n ************************************************/\r\n\r\nimport React, { ReactNode, useMemo } from 'react'\r\nimport createContext from './createContext'\r\nimport { useReducer } from './useReducer'\r\nimport useFuseSelector, { useContextSelector } from './useContextSelector'\r\nimport SetupDiffuse, { GlobalStateMachineType } from './SetupDiffuse'\r\n\r\nexport interface InitializedReducer {\r\n    name: string,\r\n    initialState: unknown,\r\n    middleware?: {\r\n        beforeWare?: Function[]\r\n        afterWare?: Function[]\r\n    },\r\n    reducer: Function,\r\n    asyncReducer: Function,\r\n    actions: Function[],\r\n    asyncActions: Promise<unknown>[]    \r\n}\r\n\r\n// Create diffuse context\r\nconst DiffuseContext = createContext()\r\n\r\n/**\r\n * Diffuse ContextSelector\r\n * @param {function} selector Select from context\r\n */\r\nconst useFuse: UseFuseType = (fuse) => {\r\n    return useFuseSelector(DiffuseContext, fuse)\r\n}\r\n\r\nexport interface UseFuseType {\r\n    (fuse: string) : Object\r\n}\r\n\r\n/**\r\n * Use dispatch hook\r\n * @param {string} reducerName Name of reducer to get dispatch for. Defaults to null, if null use generic dispatcher\r\n * @returns {function} Dispatch function\r\n */\r\nconst useDispatch: UseDispatchType = (reducerName?: string) => {\r\n    if (reducerName === undefined) {\r\n        return useContextSelector(DiffuseContext, (context) => context.dispatch)\r\n    }\r\n    return useContextSelector(DiffuseContext, (context) => context.dispatch)(reducerName)\r\n}\r\n\r\nexport interface UseDispatchType {\r\n    (reducerName?: string) : Function\r\n}\r\n\r\n/**\r\n * Use actions hook\r\n * @param {string} reducerName Name of reducer to get actions for. Defaults to null, if null willl return empty actions list\r\n * @returns {object} List of actions to be ran as functions \r\n */\r\nconst useActions: UseActionType= (reducerName: string) => {\r\n    if (reducerName === undefined) {\r\n        console.warn(\"Reducer name is null please specify a name\")\r\n        return {}\r\n    } \r\n\r\n    const dispatch = useContextSelector(DiffuseContext, (context) => context.dispatch)(reducerName)\r\n\r\n    if (dispatch === undefined) {\r\n        console.warn(`Reducer of the name ${reducerName} does not exist`)\r\n        return {}\r\n    }\r\n    \r\n    const actionsDict = [...SetupDiffuse.globalStateMachine.actions?.[reducerName], ...SetupDiffuse.globalStateMachine.asyncActions?.[reducerName]]\r\n\r\n    const actions: any  = {}\r\n\r\n    actionsDict.map(actionName => {\r\n        actions[actionName] = (payload) => {\r\n            dispatch({type: actionName, payload})\r\n        }\r\n    })\r\n\r\n    return actions\r\n}\r\n\r\nexport interface UseActionType {\r\n    (reducerName?: string) : Array<{(payload: unknown)}>\r\n} \r\n\r\n/**\r\n * Connects Child to a specified fuse\r\n * @param {string} fuseName Fuse to reference\r\n * @param {Component} Child Component to reference\r\n * @returns Wired component\r\n */\r\nconst connectWire = (fuseName, Child) => (props) => {\r\n    // Get from fuse\r\n    const context = useFuse(fuseName) \r\n    \r\n    // Get dispatch for fuse\r\n    const dispatch = useDispatch(fuseName)\r\n\r\n    const actions = useActions(fuseName)\r\n\r\n    // Get fuse\r\n    const fuse = {\r\n        [fuseName]: {\r\n            store: context,\r\n            dispatch: dispatch,\r\n            actions: actions\r\n        }\r\n    }\r\n\r\n    // Set up memoization\r\n    return useMemo(() => <Child {...fuse} {...props} />, [props, context])\r\n}\r\n\r\n/**\r\n * Wires component to a specified fuses\r\n * @param {object} properties\r\n * @param {string} properties.fuseName Fuse to reference\r\n * @param {Component} properties.component Component to reference\r\n * @returns Wired component\r\n */\r\nconst wire = ({ fuseName = [], Child }) => {\r\n    // Set child\r\n    let newChild = Child\r\n    \r\n    // Connect all wires to fuses by name\r\n    fuseName.forEach((name)=> {\r\n        newChild = connectWire(name, newChild)\r\n    })\r\n\r\n    return newChild\r\n}\r\n\r\n/**\r\n * Creates a reducer\r\n * @param {object} props Reducer props\r\n * @param {object} props.initialState Initial reducer state\r\n * @param {array} props.actions Key value pair of functions\r\n */\r\nconst createReducer = ({ initialState = {}, actions = [], middleware = { beforeWare: [], afterWare: [] }, asyncActions = null }) => {\r\n    // Reducer\r\n    const reducer = {\r\n        // Initial state dictionary\r\n        initialState: {\r\n            diffuse: {\r\n                loading: false,\r\n                error: false\r\n            },\r\n            ...initialState\r\n        },\r\n\r\n        // Actions dictionary\r\n        actionsDict: {\r\n            INITIALIZE_STORE: (state, payload = {}) => {\r\n                return {\r\n                    diffuse: {\r\n                        loading: false,\r\n                        error: false\r\n                    },\r\n                    ...initialState,\r\n                    ...payload\r\n                }\r\n            },\r\n            LOADING: (state) => {\r\n                return {\r\n                    diffuse: {\r\n                        loading: true,\r\n                        error: false\r\n                    }\r\n                }\r\n            },\r\n            SUCCESS: (state, payload) => {\r\n                return {\r\n                    diffuse: {\r\n                        loading: false,\r\n                        error: false\r\n                    },\r\n                    ...payload\r\n                }\r\n            },\r\n            PROGRESS: (state, payload) => {\r\n                return {\r\n                    ...payload\r\n                }\r\n            },\r\n            FAIL: (state, payload) => {\r\n                return {\r\n                    diffuse: {\r\n                        loading: false,\r\n                        error: true\r\n                    },\r\n                    ...payload\r\n                }\r\n            }\r\n        },\r\n\r\n        // Async actions dictionary\r\n        asyncActionsDict: {},\r\n\r\n        // Middleware\r\n        middleware: middleware,\r\n\r\n        // Initialized reducer function\r\n        initialize: (name) => ({\r\n            name: name,\r\n            initialState: { ...reducer.initialState },\r\n            middleware: middleware,\r\n            reducer: reducer.reducer,\r\n            asyncReducer: reducer.asyncReducer,\r\n            actions: reducer.actionsDict,\r\n            asyncActions: reducer.asyncActionsDict\r\n        }),\r\n\r\n        /**\r\n         * Performs action on state\r\n         * @param {object} state Current state\r\n         * @param {object} action Action type and payload to perform on state\r\n         * @returns New state\r\n         */\r\n        reducer: (state, action) => {\r\n            // If action exist in dictionary run the action and return the value\r\n            if (action.type in reducer.actionsDict) {\r\n                const res = reducer.actionsDict[action.type](state, action.payload)\r\n                return {\r\n                    ...state,\r\n                    ...res\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Performs async action on state\r\n         * @param {object} action Action type and payload to perform on state\r\n         * @param {function} onSuccess On success of running async action\r\n         * @param {function} onFail On fail of running async action\r\n         * @param {function} onProgress In progress of running async action\r\n         * @param {function} onLoading Start loading async action\r\n         * @returns New state based on async action\r\n         */\r\n        asyncReducer: async (action, onSuccess, onFail, onProgress, onLoading) => {\r\n            onLoading()\r\n            return {\r\n                ...(await reducer.asyncActionsDict[action.type](\r\n                    {\r\n                        state: action.store,\r\n                        payload: action.payload\r\n                    },\r\n                    onSuccess,\r\n                    onFail,\r\n                    onProgress\r\n                )),\r\n                type: action.type\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Add action to reducer\r\n         * @param {string} actionName Action name\r\n         * @param {function} action Action to perform on reducer\r\n         */\r\n        addAction: (actionName, action) => {\r\n            // Add regular action\r\n            if (action.type === 'action') {\r\n                reducer.actionsDict[actionName] = action.job\r\n            }\r\n            // Add async action\r\n            else if (action.type === 'async') {\r\n                reducer.asyncActionsDict[actionName] = action.job\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Remove action from reducer\r\n         * @param {string} actionName Action name to remove from reducer\r\n         */\r\n        removeAction: (actionName) => {\r\n            // Remove action by name\r\n            if (actionName in reducer.actionsDict) {\r\n                delete reducer.actionsDict[actionName]\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get actions from reducer\r\n         * @returns Array of actions\r\n         */\r\n        getActions: () => {\r\n            // Init actions array\r\n            const actions:any = []\r\n\r\n            // For each action push to array\r\n            for (const key in reducer.actionsDict) {\r\n                actions.push(reducer.actionsDict[key])\r\n            }\r\n\r\n            // return actions\r\n            return actions\r\n        }\r\n    }\r\n\r\n    // Add actions to dictionary\r\n    for (const key in actions) {\r\n        reducer.addAction(key, actions[key])\r\n    }\r\n\r\n    return reducer\r\n}\r\n\r\n/**\r\n * Create global state from reducers\r\n * @param {object[]} reducers Initialized reducers \r\n * @returns Store\r\n */\r\nconst createGlobalState: GlobalStateStore = (reducers: InitializedReducer[]) => {\r\n    return SetupDiffuse.createGlobalState(reducers)\r\n}\r\n\r\nexport interface GlobalStateStore {\r\n    (reducer: InitializedReducer[]) :  GlobalStateMachineType\r\n}\r\n\r\n/**\r\n * Diffuse Provider\r\n * @param {object} properties Properties for Diffusion\r\n * @param {object[]} properties.reducers Array of initialized reducers\r\n * @param {Component} properties.children Main App\r\n */\r\nconst Diffuse : DiffuseContext = ({ reducers, children }) => {\r\n    // Get globalStateMachine from singleton class\r\n    let globalStateMachine = SetupDiffuse.globalStateMachine\r\n\r\n    // If reducers not undefined\r\n    if (reducers !== undefined) {\r\n        // Create store if reducers are passed through props\r\n        globalStateMachine = createGlobalState(reducers)\r\n    }\r\n\r\n    if (Object.keys(globalStateMachine).length === 0) {\r\n        console.warn('No reducers specified')\r\n    }\r\n    \r\n    // Use reducer\r\n    const value = useReducer(globalStateMachine)\r\n    // Return diffusion provider\r\n    return <DiffuseContext.Provider value={value}>{children}</DiffuseContext.Provider>\r\n}\r\n\r\nexport interface DiffuseValues {\r\n    reducers?: InitializedReducer[]\r\n    children?: ReactNode\r\n}\r\n\r\nexport interface DiffuseContext {\r\n    ({reducers, children}: DiffuseValues) : JSX.Element\r\n}\r\n\r\nexport { wire, createReducer, createGlobalState, useFuse, useDispatch, useActions}\r\n\r\nexport default Diffuse\r\n"],"names":["createProvider","ProviderOriginal","value","children","valueRef","useRef","listenersRef","Set","contextValue","registerListener","listener","current","add","listeners","useEffect","forEach","undefined","fuse","reducerUpdated","shouldUpdate","React","createContext","defaultValue","context","createContextOriginal","register","Consumer","Provider","useForceUpdate","useState","force","forceUpdate","useReducer","reducer","asyncReducer","initialState","middleware","actions","asyncActions","console","warn","state","getState","useCallback","onLoading","reducerName","setValue","type","onSuccess","payload","onFail","onProgress","action","afterWare","length","newAction","nextState","noAction","store","beforeWare","includes","dispatch","useFuseSelector","useContext","selector","selectedValue","setSelectedValue","selectorRef","updateValueIfNeeded","newValue","newSelectedValue","unregisterListener","useContextSelector","setupDiffuseClass","globalStateMachine","createGlobalState","reducers","map","singleReducer","name","Object","keys","DiffuseContext","useFuse","useDispatch","useActions","actionsDict","SetupDiffuse","actionName","connectWire","fuseName","Child","props","useMemo","wire","newChild","createReducer","diffuse","loading","error","INITIALIZE_STORE","LOADING","SUCCESS","PROGRESS","FAIL","asyncActionsDict","initialize","res","addAction","job","removeAction","getActions","key","push","Diffuse"],"mappings":"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"}