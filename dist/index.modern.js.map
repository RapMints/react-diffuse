{"version":3,"file":"index.modern.js","sources":["../src/createContext.js","../example/src/StateManagement/middlewares/logger.js","../src/useReducer.js","../src/useContextSelector.js","../src/index.js"],"sourcesContent":["import React, {\r\n  createContext as createContextOriginal,\r\n  useEffect,\r\n  useRef\r\n} from 'react'\r\n\r\nexport const ORIGINAL_PROVIDER = Symbol()\r\n\r\nfunction createProvider(ProviderOriginal) {\r\n  return ({ value, children }) => {\r\n    const valueRef = useRef(value)\r\n    const listenersRef = useRef(new Set())\r\n    const contextValue = useRef({\r\n      value: valueRef,\r\n      registerListener: (listener) => {\r\n        listenersRef.current.add(listener)\r\n        return () => listenersRef.current.delete(listener)\r\n      },\r\n      listeners: new Set()\r\n    })\r\n\r\n    useEffect(() => {\r\n      valueRef.current = value\r\n      listenersRef.current.forEach((listener) => {\r\n        listener(value)\r\n      })\r\n    }, [value])\r\n\r\n    return (\r\n      <ProviderOriginal value={contextValue.current}>\r\n        {children}\r\n      </ProviderOriginal>\r\n    )\r\n  }\r\n}\r\n\r\nexport default function createContext(defaultValue) {\r\n  const context = createContextOriginal({\r\n    value: {\r\n      current: defaultValue\r\n    },\r\n    register: () => {\r\n      return () => {}\r\n    }\r\n  })\r\n\r\n  delete context.Consumer\r\n\r\n  context.Provider = createProvider(context.Provider)\r\n\r\n  return context\r\n}\r\n","export default (name) => (action) => {\r\n  console.log(name, action.type, action.store);\r\n};\r\n","import React, { useCallback, useRef, useState } from 'react'\r\nimport logger from '../example/src/StateManagement/middlewares/logger'\r\n\r\nfunction useForceUpdate() {\r\n    const [force, forceUpdate] = useState(null)\r\n    return forceUpdate\r\n}\r\n\r\nexport default function useReducer(reducer, initState) {\r\n    const forceUpdate = useForceUpdate()\r\n    const state = useRef(initState)\r\n    const getState = useCallback(() => {\r\n        return state\r\n    }, [state])\r\n\r\n    const setValue = useCallback(\r\n        (newValue) => {\r\n            const nextState = reducer(state.current, newValue)\r\n\r\n            state.current = nextState\r\n\r\n            forceUpdate({ ...nextState })\r\n            return nextState\r\n        },\r\n        [getState]\r\n    )\r\n\r\n    return [state.current, setValue]\r\n}\r\n\r\n/**\r\n * Merge old state with new state\r\n * @param {object} oldState Old state\r\n * @param {object} newState New state\r\n * @return Merged new state\r\n */\r\nconst merge = (oldState, newState) => {\r\n    const reducerName = Object.keys(newState)[0]\r\n    oldState[reducerName] = newState[reducerName]\r\n    return oldState\r\n}\r\n\r\nexport function useReducerEnhanced(reducer, initState, asyncReducer, middleware, actions, asyncActions) {\r\n    const forceUpdate = useForceUpdate()\r\n    const state = useRef(initState)\r\n    const getState = useCallback(() => {\r\n        return state\r\n    }, [state])\r\n\r\n    const setValue = useCallback(\r\n        (reducerName) => async (action) => {\r\n            // Initialize next state\r\n            let nextState = state.current[reducerName]\r\n            let newAction = action\r\n            \r\n            // If store is not defined in action set it\r\n            if (newAction.store === undefined) {\r\n                newAction.store = nextState\r\n            }\r\n\r\n            // Run before ware\r\n            if (middleware?.[reducerName]?.beforeWare !== undefined && middleware[reducerName].beforeWare.length !== 0) {\r\n                middleware?.[reducerName].beforeWare.forEach((beforeWare) => {\r\n                    beforeWare(newAction)\r\n                })\r\n            }\r\n\r\n            // If action is a regular function\r\n            if (actions[reducerName].includes(action.type)) {\r\n                nextState = reducer[reducerName](state.current[reducerName], action)\r\n            } \r\n            // If action is asyncronous\r\n            else if (asyncActions[reducerName].includes(action.type)) {\r\n                nextState = await asyncReducer[reducerName](state.current[reducerName], action)\r\n                newAction.store = nextState\r\n            } \r\n            // If action doesn't exist\r\n            else {\r\n                logger.warn('No state change, no update')\r\n                return nextState\r\n            }\r\n\r\n            if (middleware?.[reducerName]?.afterWare !== undefined && middleware[reducerName].afterWare.length !== 0) {\r\n                middleware?.[reducerName].afterWare.forEach((afterWare) => {\r\n                    afterWare(newAction)\r\n                })\r\n            }\r\n\r\n            state.current[reducerName] = nextState\r\n\r\n            forceUpdate({ ...state.current, [reducerName]: nextState })\r\n            \r\n            return nextState\r\n        },\r\n        [getState]\r\n    )\r\n\r\n    return [state.current, setValue]\r\n}\r\n","import { useContext, useEffect, useRef, useState } from 'react'\r\n\r\nexport default function useContextSelector(context, selector) {\r\n  const { value, registerListener } = useContext(context)\r\n  // We use a state to store the selectedValue\r\n  // It will re-render only if the value changes\r\n  // As you may notice, I lazily initialize the value\r\n  const [selectedValue, setSelectedValue] = useState(() =>\r\n    selector(value.current)\r\n  )\r\n  const selectorRef = useRef(selector)\r\n\r\n  useEffect(() => {\r\n    // Store the selector function at each render\r\n    // Because maybe the function has changed\r\n    selectorRef.current = selector\r\n  })\r\n\r\n  useEffect(() => {\r\n    const updateValueIfNeeded = (newValue) => {\r\n      // Calculate the new selectedValue\r\n      const newSelectedValue = selectorRef.current(newValue)\r\n      // Only update when selected values are not the same\r\n      // React will only re-render if the reference has changed\r\n      // Use the callback to be able to select callback too\r\n      // Otherwise it will the selected callback\r\n      if (selectedValue !== newSelectedValue) {\r\n        setSelectedValue(() => newSelectedValue)\r\n      }\r\n    }\r\n\r\n    const unregisterListener = registerListener(updateValueIfNeeded)\r\n\r\n    return unregisterListener\r\n  }, [registerListener, value, selectedValue])\r\n\r\n  return selectedValue\r\n}\r\n","/************************************************\r\n * React Diffuse\r\n * @description Global state management solution\r\n * @copyright 2022 RAPMINTS, LLC. All rights reserved.\r\n * @author Kyle Watkins, Paul Scala\r\n * @example https://codesandbox.io/s/wispy-leaf-iyp9k6\r\n ************************************************/\r\nimport React, { useContext, useMemo } from 'react'\r\nimport createContext from './createContext'\r\nimport { useReducerEnhanced } from './useReducer'\r\nimport useContextSelector from './useContextSelector'\r\n\r\n// Create diffuse context\r\nconst DiffuseContext = createContext()\r\n\r\n/**\r\n * Diffuse ContextSelector\r\n * @param {function} selector Select from context\r\n */\r\nfunction useFuse(selector) {\r\n    return useContextSelector(DiffuseContext, (context) => selector(context.value))\r\n}\r\n\r\nfunction useDispatch(reducerName = null) {\r\n    if (reducerName === null) {\r\n        return useContextSelector(DiffuseContext, (context) => context.setValue)\r\n    }\r\n    return useContextSelector(DiffuseContext, (context) => context.setValue)(reducerName)\r\n}\r\n\r\n/**\r\n * Wires component to a specified fuse\r\n * @param {object} properties\r\n * @param {string} properties.fuseName Fuse to reference\r\n * @param {Component} properties.component Component to reference\r\n * @returns Wired component\r\n */\r\nconst wire =\r\n    ({ fuseName = [], Child }) =>\r\n    (props) => {\r\n        // Use diffusion context\r\n        const context = useFuse((store) => store)\r\n        const dispatch = useDispatch()\r\n        const fuses = {}\r\n        const memoConstraint = []\r\n\r\n        for (let i = 0; i < fuseName.length; i++) {\r\n            fuses[fuseName[i]] = {\r\n                store: context[fuseName[i]],\r\n                dispatch: dispatch(fuseName[i])\r\n            }\r\n            memoConstraint.push(context[fuseName[i]])\r\n        }\r\n\r\n        // Set up memoization\r\n        return useMemo(() => <Child {...fuses} {...props} />, [props, ...memoConstraint])\r\n    }\r\n\r\n/**\r\n * Reduce\r\n * @param {object} reducer Reducer\r\n * @param {object} initialState Initial state\r\n * @param {object} actions Actions\r\n */\r\nconst Reduce = ({ reducer, initialState, middleware, asyncReducer = null, actions, asyncActions }) => {\r\n    // Create initial dispatch\r\n    const [state, dispatch] = React.useReducer((state, action) => action.store, initialState)\r\n\r\n    // Create enhanced dispatch\r\n    const enhancedDispatch = (newAction) => {\r\n        const res = reducer(newAction.store, newAction)\r\n        if (newAction.store !== res) {\r\n            newAction.store = res\r\n        }\r\n\r\n        dispatch(newAction)\r\n        return res\r\n    }\r\n\r\n    // Create enhanced async dispatch\r\n    const enhancedAsyncDispatch = async (newAction) => {\r\n        return (await asyncReducer(newAction, onSuccess, onFail, onProgress, onLoading)).store\r\n    }\r\n\r\n    // Initialize Default Loading Function\r\n    const onLoading = () => {\r\n        return dispatchWithMiddleWare({ type: 'LOADING' })\r\n    }\r\n\r\n    // Initialize Default Success Function\r\n    const onSuccess = (payload) => {\r\n        return dispatchWithMiddleWare({ type: 'SUCCESS', payload })\r\n    }\r\n\r\n    // Initialize Default Fail Function\r\n    const onFail = (payload) => {\r\n        return dispatchWithMiddleWare({ type: 'FAIL', payload })\r\n    }\r\n\r\n    // Initialize Default Progress functions\r\n    const onProgress = (payload) => {\r\n        return dispatchWithMiddleWare({ type: 'PROGRESS', payload })\r\n    }\r\n\r\n    // Dispatch with middleware\r\n    const dispatchWithMiddleWare = async (action) => {\r\n        // Set new action from action passed through dispatch\r\n        let newAction = action\r\n\r\n        // If store is not defined in action set it\r\n        if (newAction.store === undefined) {\r\n            newAction.store = state\r\n        }\r\n\r\n        // If before ware is available run it\r\n        if (middleware && middleware.beforeWare) {\r\n            middleware.beforeWare.forEach((beforeWare) => {\r\n                beforeWare(newAction)\r\n            })\r\n        }\r\n\r\n        // Async actions are available and the current action is async\r\n        if (asyncReducer !== null && Object.keys(asyncActions).includes(newAction.type)) {\r\n            // Get new store from dispatch\r\n            const newStore = await enhancedAsyncDispatch(newAction)\r\n\r\n            // Set new action with new store\r\n            newAction = { ...newAction, store: { ...newStore } }\r\n        } else {\r\n            // Get new store from dispatch\r\n            const newStore = { ...enhancedDispatch(newAction) }\r\n\r\n            // Set new action with new store\r\n            newAction = { ...newAction, store: { ...newStore } }\r\n        }\r\n\r\n        // If afterWare is available run it\r\n        if (middleware && middleware.afterWare) {\r\n            middleware.afterWare.forEach((afterWare) => {\r\n                afterWare(newAction)\r\n            })\r\n        }\r\n\r\n        // Return new action\r\n        return newAction\r\n    }\r\n\r\n    let actionsDispatch = () => {\r\n        let actionKeys = Object.keys(actions)\r\n        let asyncActionKeys = Object.keys(asyncActions)\r\n        let actionDispatch = {}\r\n        actionKeys.map((a) => {\r\n            actionDispatch[a] = (payload) => dispatchWithMiddleWare({ type: a, payload: payload })\r\n        })\r\n\r\n        asyncActionKeys.map((a) => {\r\n            actionDispatch[a] = (payload) => dispatchWithMiddleWare({ type: a, payload: payload })\r\n        })\r\n\r\n        return actionDispatch\r\n    }\r\n    // Return state as store and dispatch as dispatch middleware\r\n    const value = {\r\n        /**\r\n         * Current state of reducer\r\n         * @type object\r\n         */\r\n        store: state,\r\n        /**\r\n         * @deprecated Use actions instead\r\n         */\r\n        dispatch: dispatchWithMiddleWare,\r\n        /**\r\n         * Dispatch actions for reducer\r\n         * @type object\r\n         */\r\n        actions: actionsDispatch()\r\n    }\r\n\r\n    return value\r\n}\r\n\r\n\r\n/**\r\n * Creates a reducer\r\n * @param {object} props Reducer props\r\n * @param {object} props.initialState Initial reducer state\r\n * @param {array} props.actions Key value pair of functions\r\n */\r\nconst createReducer = ({ initialState = {}, actions = [], middleware = { beforeWare: [], afterWare: [] }, asyncActions = null }) => {\r\n    // Reducer\r\n    const reducer = {\r\n        // Initial state dictionary\r\n        initialState: {\r\n            diffuse: {\r\n                loading: false,\r\n                error: false\r\n            },\r\n            ...initialState\r\n        },\r\n\r\n        // Actions dictionary\r\n        actionsDict: {\r\n            INITIALIZE_STORE: (state, payload = {}) => {\r\n                return {\r\n                    diffuse: {\r\n                        loading: false,\r\n                        error: false\r\n                    },\r\n                    ...initialState,\r\n                    ...payload\r\n                }\r\n            },\r\n            LOADING: (state) => {\r\n                return {\r\n                    diffuse: {\r\n                        loading: true,\r\n                        error: false\r\n                    }\r\n                }\r\n            },\r\n            SUCCESS: (state, payload) => {\r\n                return {\r\n                    diffuse: {\r\n                        loading: false,\r\n                        error: false\r\n                    },\r\n                    ...payload\r\n                }\r\n            },\r\n            PROGRESS: (state, payload) => {\r\n                return {\r\n                    ...payload\r\n                }\r\n            },\r\n            FAIL: (state, payload) => {\r\n                return {\r\n                    diffuse: {\r\n                        loading: false,\r\n                        error: true\r\n                    },\r\n                    ...payload\r\n                }\r\n            }\r\n        },\r\n\r\n        // Async actions dictionary\r\n        asyncActionsDict: {},\r\n\r\n        // Middleware\r\n        middleware: middleware,\r\n\r\n        // Initialized reducer function\r\n        initialize: (name) => ({\r\n            name: name,\r\n            initialState: { ...reducer.initialState },\r\n            middleware: middleware,\r\n            reducer: reducer.reducer,\r\n            asyncReducer: reducer.asyncReducer,\r\n            actions: reducer.actionsDict,\r\n            asyncActions: reducer.asyncActionsDict\r\n        }),\r\n\r\n        /**\r\n         * Performs action on state\r\n         * @param {object} state Current state\r\n         * @param {object} action Action type and payload to perform on state\r\n         * @returns New state\r\n         */\r\n        reducer: (state, action) => {\r\n            // If action exist in dictionary run the action and return the value\r\n            if (action.type in reducer.actionsDict) {\r\n                const res = reducer.actionsDict[action.type](state, action.payload)\r\n                return {\r\n                    ...state,\r\n                    ...res\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Performs async action on state\r\n         * @param {object} action Action type and payload to perform on state\r\n         * @param {function} onSuccess On success of running async action\r\n         * @param {function} onFail On fail of running async action\r\n         * @param {function} onProgress In progress of running async action\r\n         * @param {function} onLoading Start loading async action\r\n         * @returns New state based on async action\r\n         */\r\n        asyncReducer: async (action, onSuccess, onFail, onProgress, onLoading) => {\r\n            onLoading()\r\n            return {\r\n                ...(await reducer.asyncActionsDict[action.type](\r\n                    {\r\n                        state: action.store,\r\n                        payload: action.payload\r\n                    },\r\n                    onSuccess,\r\n                    onFail,\r\n                    onProgress\r\n                )),\r\n                type: action.type\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Add action to reducer\r\n         * @param {string} actionName Action name\r\n         * @param {function} action Action to perform on reducer\r\n         */\r\n        addAction: (actionName, action) => {\r\n            // Add regular action\r\n            if (action.type === 'action') {\r\n                reducer.actionsDict[actionName] = action.job\r\n            }\r\n            // Add async action\r\n            else if (action.type === 'async') {\r\n                reducer.asyncActionsDict[actionName] = action.job\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Remove action from reducer\r\n         * @param {string} actionName Action name to remove from reducer\r\n         */\r\n        removeAction: (actionName) => {\r\n            // Remove action by name\r\n            if (actionName in reducer.actionsDict) {\r\n                delete reducer.actionsDict[actionName]\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get actions from reducer\r\n         * @returns Array of actions\r\n         */\r\n        getActions: () => {\r\n            // Init actions array\r\n            const actions = []\r\n\r\n            // For each action push to array\r\n            for (const key in reducer.actionsDict) {\r\n                actions.push(reducer.actionsDict[key])\r\n            }\r\n\r\n            // return actions\r\n            return actions\r\n        }\r\n    }\r\n\r\n    // Add actions to dictionary\r\n    for (const key in actions) {\r\n        reducer.addAction(key, actions[key])\r\n    }\r\n\r\n    return reducer\r\n}\r\n\r\nclass setupDiffuseClass {\r\n    constructor() {\r\n        this.store = {}\r\n    }\r\n\r\n    CombineReducers(reducers) {\r\n        const initialState = {}\r\n        const reducer = {}\r\n        const asyncReducer = {}\r\n        const middleware = {}\r\n        const actions = {}\r\n        const asyncActions = {}\r\n        reducers.map((singleReducer) => {\r\n            initialState[singleReducer.name] = singleReducer.initialState\r\n            reducer[singleReducer.name] = singleReducer.reducer\r\n            asyncReducer[singleReducer.name] = singleReducer.asyncReducer\r\n            middleware[singleReducer.name] = singleReducer.middleware\r\n            actions[singleReducer.name] = Object.keys(singleReducer.actions)\r\n            asyncActions[singleReducer.name] = Object.keys(singleReducer.asyncActions)\r\n        })\r\n\r\n        const store = {\r\n            initialState: initialState,\r\n            reducer: reducer,\r\n            asyncReducer: asyncReducer,\r\n            middleware: middleware,\r\n            actions: actions,\r\n            asyncActions: asyncActions\r\n        }\r\n\r\n        this.store = store\r\n\r\n        return store\r\n    }\r\n}\r\n\r\nconst SetupDiffuse = new setupDiffuseClass()\r\n\r\n/**\r\n * Diffuse Provider\r\n * @param {object} properties Properties for Diffusion\r\n * @param {Component} properties.children Main App\r\n */\r\nconst Diffuse = ({ reducers, children }) => {\r\n  let store = SetupDiffuse.store\r\n\r\n  if (reducers !== undefined) {\r\n      store = SetupDiffuse.CombineReducers(reducers)\r\n  }\r\n  const { initialState, reducer, asyncReducer, middleware, actions, asyncActions } = store\r\n  const [value, setValue] = useReducerEnhanced(reducer, initialState, asyncReducer, middleware, actions, asyncActions)\r\n\r\n  // Return diffusion provider\r\n  return <DiffuseContext.Provider value={{ value, setValue }}>{children}</DiffuseContext.Provider>\r\n}\r\n\r\nexport { wire, createReducer, useFuse, useDispatch, SetupDiffuse }\r\n\r\nexport default Diffuse\r\n"],"names":["createProvider","ProviderOriginal","value","children","valueRef","useRef","listenersRef","Set","contextValue","registerListener","listener","current","add","listeners","useEffect","forEach","createContext","defaultValue","context","createContextOriginal","register","Consumer","Provider","name","action","console","log","type","store","useForceUpdate","useState","force","forceUpdate","useReducerEnhanced","reducer","initState","asyncReducer","middleware","actions","asyncActions","state","getState","useCallback","setValue","reducerName","afterWare","undefined","length","newAction","nextState","beforeWare","includes","logger","warn","useContextSelector","selector","useContext","selectedValue","setSelectedValue","selectorRef","updateValueIfNeeded","newValue","newSelectedValue","unregisterListener","DiffuseContext","useFuse","useDispatch","wire","fuseName","Child","props","dispatch","fuses","memoConstraint","i","push","useMemo","createReducer","initialState","diffuse","loading","error","actionsDict","INITIALIZE_STORE","payload","LOADING","SUCCESS","PROGRESS","FAIL","asyncActionsDict","initialize","res","onSuccess","onFail","onProgress","onLoading","addAction","actionName","job","removeAction","getActions","key","setupDiffuseClass","CombineReducers","reducers","map","singleReducer","Object","keys","SetupDiffuse","Diffuse"],"mappings":"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"}