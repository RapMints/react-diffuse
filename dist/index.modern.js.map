{"version":3,"file":"index.modern.js","sources":["../src/index.js"],"sourcesContent":["/************************************************\n * React Diffuse\n * @description Global state management solution\n * @copyright 2022 RAPMINTS, LLC. All rights reserved.\n * @author Kyle Watkins, Paul Scala\n * @example https://codesandbox.io/s/wispy-leaf-iyp9k6\n ************************************************/\nimport React, { useContext, useMemo } from 'react'\n\n// Create diffuse context\nconst DiffuseContext = React.createContext()\n\n/**\n * Wires component to a specified fuse\n * @param {object} properties\n * @param {string} properties.fuseName Fuse to reference\n * @param {Component} properties.component Component to reference\n * @returns Wired component\n */\nconst wire =\n  ({ fuseName = [], Child }) =>\n  (props) => {\n    // Use diffusion context\n    const context = useContext(DiffuseContext)\n    const fuses = {}\n    const memoConstraint = []\n    for (let i = 0; i < fuseName.length; i++) {\n      fuses[fuseName[i]] = context[fuseName[i]]\n      memoConstraint.push(context[fuseName[i]].store)\n    }\n\n    // Set up memoization\n    return useMemo(\n      () => <Child {...fuses} {...props} />,\n      [props, ...memoConstraint]\n    )\n  }\n\n/**\n * Reduce\n * @param {object} reducer Reducer\n * @param {object} initialState Initial state\n * @param {object} actions Actions\n */\nconst Reduce = ({\n  reducer,\n  initialState,\n  middleware,\n  asyncReducer = null,\n  actions,\n  asyncActions\n}) => {\n  // Create initial dispatch\n  const [state, dispatch] = React.useReducer(\n    (state, action) => action.store,\n    initialState\n  )\n\n  // Create enhanced dispatch\n  const enhancedDispatch = (newAction) => {\n    const res = reducer(newAction.store, newAction)\n    if (newAction.store !== res) {\n      newAction.store = res\n    }\n\n    dispatch(newAction)\n    return res\n  }\n\n  // Create enhanced async dispatch\n  const enhancedAsyncDispatch = async (newAction) => {\n    return (\n      await asyncReducer(newAction, onSuccess, onFail, onProgress, onLoading)\n    ).store\n  }\n\n  // Initialize Default Loading Function\n  const onLoading = () => {\n    return dispatchWithMiddleWare({ type: 'LOADING' })\n  }\n\n  // Initialize Default Success Function\n  const onSuccess = (payload) => {\n    return dispatchWithMiddleWare({ type: 'SUCCESS', payload })\n  }\n\n  // Initialize Default Fail Function\n  const onFail = (payload) => {\n    return dispatchWithMiddleWare({ type: 'FAIL', payload })\n  }\n\n  // Initialize Default Progress functions\n  const onProgress = (payload) => {\n    return dispatchWithMiddleWare({ type: 'PROGRESS', payload })\n  }\n\n  // Dispatch with middleware\n  const dispatchWithMiddleWare = async (action) => {\n    // Set new action from action passed through dispatch\n    let newAction = action\n\n    // If store is not defined in action set it\n    if (newAction.store === undefined) {\n      newAction.store = state\n    }\n\n    // If before ware is available run it\n    if (middleware && middleware.beforeWare) {\n      middleware.beforeWare.forEach((beforeWare) => {\n        beforeWare(newAction)\n      })\n    }\n\n    // Async actions are available and the current action is async\n    if (\n      asyncReducer !== null &&\n      Object.keys(asyncActions).includes(newAction.type)\n    ) {\n      // Get new store from dispatch\n      const newStore = await enhancedAsyncDispatch(newAction)\n\n      // Set new action with new store\n      newAction = { ...newAction, store: { ...newStore } }\n    } else {\n      // Get new store from dispatch\n      const newStore = { ...enhancedDispatch(newAction) }\n\n      // Set new action with new store\n      newAction = { ...newAction, store: { ...newStore } }\n    }\n\n    // If afterWare is available run it\n    if (middleware && middleware.afterWare) {\n      middleware.afterWare.forEach((afterWare) => {\n        afterWare(newAction)\n      })\n    }\n\n    // Return new action\n    return newAction\n  }\n\n  // Return state as store and dispatch as dispatch middleware\n  const value = {\n    store: state,\n    dispatch: dispatchWithMiddleWare\n  }\n\n  return value\n}\n\n/**\n *\n * @param {object[]} values\n */\nconst MergeReducers = (globalState = []) => {\n  // Reduce each state into reducers\n  const reducers = globalState.map((state) => {\n    return {\n      [state.name]: () =>{\n        const reducer = Reduce({\n          reducer: state.reducer,\n          initialState: state.initialState,\n          middleware: state.middleware,\n          asyncReducer: state.asyncReducer,\n          actions: state.actions,\n          asyncActions: state.asyncActions\n        })\n        return reducer\n      }\n    }\n  })\n\n  // Initialize merged reducers\n  const mergedReducers = []\n\n  // Merge reducers into an array\n  reducers.map((r) => {\n    Object.keys(r).map((key) => {\n      mergedReducers.push(r[key])\n    })\n  })\n\n  return reducers\n}\n\n/**\n * Creates a reducer\n * @param {object} initialState Initial reducer state\n * @param {object} actions Key value pair of functions\n */\nconst createReducer = ({\n  initialState = {},\n  actions = [],\n  middleware = { beforeWare: [], afterWare: [] },\n  asyncActions = null\n}) => {\n  // Reducer\n  const reducer = {\n    initialState: {\n      diffuse: {\n        loading: false,\n        error: false\n      },\n      ...initialState\n    },\n    actionsDict: {\n      LOADING: (state) => {\n        return {\n          diffuse: {\n            loading: true,\n            error: false\n          }\n        }\n      },\n      SUCCESS: (state, payload) => {\n        return {\n          diffuse: {\n            loading: false,\n            error: false\n          },\n          ...payload\n        }\n      },\n      PROGRESS: (state, payload) => {\n        return {\n          ...payload\n        }\n      },\n      FAIL: (state, payload) => {\n        return {\n          diffuse: {\n            loading: false,\n            error: true\n          },\n          ...payload\n        }\n      }\n    },\n    asyncActionsDict: {},\n    middleware: middleware,\n    // Initialized reducer function\n    initialize: (name) => ({\n      name: name,\n      initialState: { ...reducer.initialState },\n      reducer: reducer.reducer,\n      middleware: middleware,\n      asyncReducer: reducer.asyncReducer,\n      actions: reducer.actionsDict,\n      asyncActions: reducer.asyncActionsDict\n    }),\n    reducer: (state, action) => {\n      // If action exist in dictionary run the action and return the value\n      if (action.type in reducer.actionsDict) {\n        const res = reducer.actionsDict[action.type](state, action.payload)\n        return {\n          ...state,\n          ...res\n        }\n      }\n    },\n    asyncReducer: async (action, onSuccess, onFail, onProgress, onLoading) => {\n      onLoading()\n      return {\n        ...(await reducer.asyncActionsDict[action.type](\n          action.store,\n          onSuccess,\n          onFail,\n          onProgress\n        )),\n        type: action.type\n      }\n    },\n    addAction: (actionName, action) => {\n      // Add regular action\n      if (action.type === 'action') {\n        reducer.actionsDict[actionName] = action.job\n      }\n      // Add async action\n      else if (action.type === 'async') {\n        reducer.asyncActionsDict[actionName] = action.job\n      }\n    },\n    removeAction: (actionName) => {\n      // Remove action by name\n      if (actionName in reducer.actionsDict) {\n        delete reducer.actionsDict[actionName]\n      }\n    },\n    getActions: () => {\n      // Init actions array\n      const actions = []\n\n      // For each action push to array\n      for (const key in reducer.actionsDict) {\n        actions.push(reducer.actionsDict[key])\n      }\n\n      // return actions\n      return actions\n    }\n  }\n\n  // Add actions to dictionary\n  for (const key in actions) {\n    reducer.addAction(key, actions[key])\n  }\n\n  return reducer\n}\n/**\n * Diffuse Provider\n * @param {object} properties Properties for Diffusion\n * @param {Component} properties.children Main App\n */\nconst Diffuse = ({ reducers, children }) => {\n  // Merge reducers from global state\n  const mergedReducers = MergeReducers(reducers)\n\n  // Init Fuse\n  const values = {}\n\n  \n\n  // Initialize fuses\n  for (let i = 0; i < mergedReducers.length; i++) {\n    let keys = Object.keys(mergedReducers[i])[0]\n    values[keys] = mergedReducers[i][keys]()\n  }\n\n  // Return diffusion provider\n  return (\n    <DiffuseContext.Provider value={values}>{children}</DiffuseContext.Provider>\n  )\n}\n\nexport { wire, createReducer }\n\nexport default Diffuse\n"],"names":["DiffuseContext","React","createContext","wire","fuseName","Child","props","context","useContext","fuses","memoConstraint","i","length","push","store","useMemo","Reduce","reducer","initialState","middleware","asyncReducer","asyncActions","useReducer","state","action","dispatch","enhancedDispatch","newAction","res","enhancedAsyncDispatch","onSuccess","onFail","onProgress","onLoading","dispatchWithMiddleWare","type","payload","afterWare","forEach","undefined","beforeWare","Object","keys","includes","newStore","value","MergeReducers","globalState","reducers","map","name","actions","r","key","createReducer","diffuse","loading","error","actionsDict","LOADING","SUCCESS","PROGRESS","FAIL","asyncActionsDict","initialize","addAction","actionName","job","removeAction","getActions","Diffuse","children","mergedReducers","values"],"mappings":";;;;;;;;;;;;;;;;;;;AAUA,IAAMA,cAAc,GAAGC,KAAK,CAACC,aAAN,EAAvB;;IASMC,IAAI,GACR,SADIA,IACJ;EAAA,yBAAGC,QAAH;MAAGA,QAAH,8BAAc,EAAd;MAAkBC,KAAlB,QAAkBA,KAAlB;EAAA,OACA,UAACC,KAAD,EAAW;IAET,IAAMC,OAAO,GAAGC,UAAU,CAACR,cAAD,CAA1B;IACA,IAAMS,KAAK,GAAG,EAAd;IACA,IAAMC,cAAc,GAAG,EAAvB;;IACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,QAAQ,CAACQ,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;MACxCF,KAAK,CAACL,QAAQ,CAACO,CAAD,CAAT,CAAL,GAAqBJ,OAAO,CAACH,QAAQ,CAACO,CAAD,CAAT,CAA5B;MACAD,cAAc,CAACG,IAAf,CAAoBN,OAAO,CAACH,QAAQ,CAACO,CAAD,CAAT,CAAP,CAAqBG,KAAzC;;;IAIF,OAAOC,OAAO,CACZ;MAAA,oBAAM,oBAAC,KAAD,eAAWN,KAAX,EAAsBH,KAAtB,EAAN;KADY,GAEXA,KAFW,SAEDI,cAFC,EAAd;GAZF;AAAA;;AAwBF,IAAMM,MAAM,GAAG,SAATA,MAAS,QAOT;MANJC,OAMI,SANJA,OAMI;MALJC,YAKI,SALJA,YAKI;MAJJC,UAII,SAJJA,UAII;iCAHJC,YAGI;MAHJA,YAGI,mCAHW,IAGX;MADJC,YACI,SADJA;;EAGA,wBAA0BpB,KAAK,CAACqB,UAAN,CACxB,UAACC,KAAD,EAAQC,MAAR;IAAA,OAAmBA,MAAM,CAACV,KAA1B;GADwB,EAExBI,YAFwB,CAA1B;MAAOK,KAAP;MAAcE,QAAd;;EAMA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,SAAD,EAAe;IACtC,IAAMC,GAAG,GAAGX,OAAO,CAACU,SAAS,CAACb,KAAX,EAAkBa,SAAlB,CAAnB;;IACA,IAAIA,SAAS,CAACb,KAAV,KAAoBc,GAAxB,EAA6B;MAC3BD,SAAS,CAACb,KAAV,GAAkBc,GAAlB;;;IAGFH,QAAQ,CAACE,SAAD,CAAR;IACA,OAAOC,GAAP;GAPF;;EAWA,IAAMC,qBAAqB,YAArBA,qBAAqB,CAAUF,SAAV;IAAA,IAAwB;MAAA,uBAEzCP,YAAY,CAACO,SAAD,EAAYG,SAAZ,EAAuBC,MAAvB,EAA+BC,UAA/B,EAA2CC,SAA3C,CAF6B;QACjD,OAAO,cAELnB,KAFF;;KADyB;MAAA;;GAA3B;;EAOA,IAAMmB,SAAS,GAAG,SAAZA,SAAY,GAAM;IACtB,OAAOC,sBAAsB,CAAC;MAAEC,IAAI,EAAE;KAAT,CAA7B;GADF;;EAKA,IAAML,SAAS,GAAG,SAAZA,SAAY,CAACM,OAAD,EAAa;IAC7B,OAAOF,sBAAsB,CAAC;MAAEC,IAAI,EAAE,SAAR;MAAmBC,OAAO,EAAPA;KAApB,CAA7B;GADF;;EAKA,IAAML,MAAM,GAAG,SAATA,MAAS,CAACK,OAAD,EAAa;IAC1B,OAAOF,sBAAsB,CAAC;MAAEC,IAAI,EAAE,MAAR;MAAgBC,OAAO,EAAPA;KAAjB,CAA7B;GADF;;EAKA,IAAMJ,UAAU,GAAG,SAAbA,UAAa,CAACI,OAAD,EAAa;IAC9B,OAAOF,sBAAsB,CAAC;MAAEC,IAAI,EAAE,UAAR;MAAoBC,OAAO,EAAPA;KAArB,CAA7B;GADF;;EAKA,IAAMF,sBAAsB,YAAtBA,sBAAsB,CAAUV,MAAV;IAAA,IAAqB;MAAA;QAmC/C,IAAIL,UAAU,IAAIA,UAAU,CAACkB,SAA7B,EAAwC;UACtClB,UAAU,CAACkB,SAAX,CAAqBC,OAArB,CAA6B,UAACD,SAAD,EAAe;YAC1CA,SAAS,CAACV,SAAD,CAAT;WADF;;;QAMF,OAAOA,SAAP;;;MAxCA,IAAIA,SAAS,GAAGH,MAAhB;;MAGA,IAAIG,SAAS,CAACb,KAAV,KAAoByB,SAAxB,EAAmC;QACjCZ,SAAS,CAACb,KAAV,GAAkBS,KAAlB;;;MAIF,IAAIJ,UAAU,IAAIA,UAAU,CAACqB,UAA7B,EAAyC;QACvCrB,UAAU,CAACqB,UAAX,CAAsBF,OAAtB,CAA8B,UAACE,UAAD,EAAgB;UAC5CA,UAAU,CAACb,SAAD,CAAV;SADF;;;MAX6C;QAAA,IAkB7CP,YAAY,KAAK,IAAjB,IACAqB,MAAM,CAACC,IAAP,CAAYrB,YAAZ,EAA0BsB,QAA1B,CAAmChB,SAAS,CAACQ,IAA7C,CAnB6C;UAAA,uBAsBtBN,qBAAqB,CAACF,SAAD,CAtBC,iBAsBvCiB,QAtBuC;YAyB7CjB,SAAS,gBAAQA,SAAR;cAAmBb,KAAK,eAAO8B,QAAP;cAAjC;;;UAGA,IAAMA,QAAQ,gBAAQlB,gBAAgB,CAACC,SAAD,CAAxB,CAAd;;UAGAA,SAAS,gBAAQA,SAAR;YAAmBb,KAAK,eAAO8B,QAAP;YAAjC;;;;MA/B6C;KAArB;MAAA;;GAA5B;;EA8CA,IAAMC,KAAK,GAAG;IACZ/B,KAAK,EAAES,KADK;IAEZE,QAAQ,EAAES;GAFZ;EAKA,OAAOW,KAAP;AACD,CAzGD;;AA+GA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,WAAD,EAAsB;EAAA,IAArBA,WAAqB;IAArBA,WAAqB,GAAP,EAAO;;;EAE1C,IAAMC,QAAQ,GAAGD,WAAW,CAACE,GAAZ,CAAgB,UAAC1B,KAAD,EAAW;IAAA;;IAC1C,yBACGA,KAAK,CAAC2B,IADT,IACgB,YAAK;MACjB,IAAMjC,OAAO,GAAGD,MAAM,CAAC;QACrBC,OAAO,EAAEM,KAAK,CAACN,OADM;QAErBC,YAAY,EAAEK,KAAK,CAACL,YAFC;QAGrBC,UAAU,EAAEI,KAAK,CAACJ,UAHG;QAIrBC,YAAY,EAAEG,KAAK,CAACH,YAJC;QAKrB+B,OAAO,EAAE5B,KAAK,CAAC4B,OALM;QAMrB9B,YAAY,EAAEE,KAAK,CAACF;OANA,CAAtB;MAQA,OAAOJ,OAAP;KAVJ;GADe,CAAjB;EAoBA+B,QAAQ,CAACC,GAAT,CAAa,UAACG,CAAD,EAAO;IAClBX,MAAM,CAACC,IAAP,CAAYU,CAAZ,EAAeH,GAAf,CAAmB,UAACI,GAAD,EAAS;KAA5B;GADF;EAMA,OAAOL,QAAP;AACD,CA7BD;;IAoCMM,aAAa,GAAG,SAAhBA,aAAgB,QAKhB;iCAJJpC,YAII;MAJJA,YAII,mCAJW,EAIX;4BAHJiC,OAGI;MAHJA,OAGI,8BAHM,EAGN;+BAFJhC,UAEI;MAFJA,UAEI,iCAFS;IAAEqB,UAAU,EAAE,EAAd;IAAkBH,SAAS,EAAE;GAEtC;EAEJ,IAAMpB,QAAO,GAAG;IACdC,YAAY;MACVqC,OAAO,EAAE;QACPC,OAAO,EAAE,KADF;QAEPC,KAAK,EAAE;;OAENvC,YALO,CADE;IAQdwC,WAAW,EAAE;MACXC,OAAO,EAAE,iBAACpC,KAAD,EAAW;QAClB,OAAO;UACLgC,OAAO,EAAE;YACPC,OAAO,EAAE,IADF;YAEPC,KAAK,EAAE;;SAHX;OAFS;MASXG,OAAO,EAAE,iBAACrC,KAAD,EAAQa,OAAR,EAAoB;QAC3B;UACEmB,OAAO,EAAE;YACPC,OAAO,EAAE,KADF;YAEPC,KAAK,EAAE;;WAENrB,OALL;OAVS;MAkBXyB,QAAQ,EAAE,kBAACtC,KAAD,EAAQa,OAAR,EAAoB;QAC5B,oBACKA,OADL;OAnBS;MAuBX0B,IAAI,EAAE,cAACvC,KAAD,EAAQa,OAAR,EAAoB;QACxB;UACEmB,OAAO,EAAE;YACPC,OAAO,EAAE,KADF;YAEPC,KAAK,EAAE;;WAENrB,OALL;;KAhCU;IAyCd2B,gBAAgB,EAAE,EAzCJ;IA0Cd5C,UAAU,EAAEA,UA1CE;IA4Cd6C,UAAU,EAAE,oBAACd,IAAD;MAAA,OAAW;QACrBA,IAAI,EAAEA,IADe;QAErBhC,YAAY,eAAOD,QAAO,CAACC,YAAf,CAFS;QAGrBD,OAAO,EAAEA,QAAO,CAACA,OAHI;QAIrBE,UAAU,EAAEA,UAJS;QAKrBC,YAAY,EAAEH,QAAO,CAACG,YALD;QAMrB+B,OAAO,EAAElC,QAAO,CAACyC,WANI;QAOrBrC,YAAY,EAAEJ,QAAO,CAAC8C;OAPZ;KA5CE;IAqDd9C,OAAO,EAAE,iBAACM,KAAD,EAAQC,MAAR,EAAmB;MAE1B,IAAIA,MAAM,CAACW,IAAP,IAAelB,QAAO,CAACyC,WAA3B,EAAwC;QACtC,IAAM9B,GAAG,GAAGX,QAAO,CAACyC,WAAR,CAAoBlC,MAAM,CAACW,IAA3B,EAAiCZ,KAAjC,EAAwCC,MAAM,CAACY,OAA/C,CAAZ;;QACA,oBACKb,KADL,EAEKK,GAFL;;KAzDU;IA+DdR,YAAY,YAASI,MAAT,EAAiBM,SAAjB,EAA4BC,MAA5B,EAAoCC,UAApC,EAAgDC,SAAhD;MAAA,IAA8D;QACxEA,SAAS;QAD+D,uBAG5DhB,QAAO,CAAC8C,gBAAR,CAAyBvC,MAAM,CAACW,IAAhC,EACRX,MAAM,CAACV,KADC,EAERgB,SAFQ,EAGRC,MAHQ,EAIRC,UAJQ,CAH4D;UAExE;YAOEG,IAAI,EAAEX,MAAM,CAACW;;;OATL;QAAA;;KA/DE;IA2Ed8B,SAAS,EAAE,mBAACC,UAAD,EAAa1C,MAAb,EAAwB;MAEjC,IAAIA,MAAM,CAACW,IAAP,KAAgB,QAApB,EAA8B;QAC5BlB,QAAO,CAACyC,WAAR,CAAoBQ,UAApB,IAAkC1C,MAAM,CAAC2C,GAAzC;OADF,MAIK,IAAI3C,MAAM,CAACW,IAAP,KAAgB,OAApB,EAA6B;QAChClB,QAAO,CAAC8C,gBAAR,CAAyBG,UAAzB,IAAuC1C,MAAM,CAAC2C,GAA9C;;KAlFU;IAqFdC,YAAY,EAAE,sBAACF,UAAD,EAAgB;MAE5B,IAAIA,UAAU,IAAIjD,QAAO,CAACyC,WAA1B,EAAuC;QACrC,OAAOzC,QAAO,CAACyC,WAAR,CAAoBQ,UAApB,CAAP;;KAxFU;IA2FdG,UAAU,EAAE,sBAAM;MAEhB,IAAMlB,OAAO,GAAG,EAAhB;;MAGA,KAAK,IAAME,GAAX,IAAkBpC,QAAO,CAACyC,WAA1B,EAAuC;QACrCP,OAAO,CAACtC,IAAR,CAAaI,QAAO,CAACyC,WAAR,CAAoBL,GAApB,CAAb;;;MAIF,OAAOF,OAAP;;GArGJ;;EA0GA,KAAK,IAAME,GAAX,IAAkBF,OAAlB,EAA2B;IACzBlC,QAAO,CAACgD,SAAR,CAAkBZ,GAAlB,EAAuBF,OAAO,CAACE,GAAD,CAA9B;;;EAGF,OAAOpC,QAAP;AACD;;AAMD,IAAMqD,OAAO,GAAG,SAAVA,OAAU,QAA4B;EAAA,IAAzBtB,QAAyB,SAAzBA,QAAyB;MAAfuB,QAAe,SAAfA,QAAe;EAE1C,IAAMC,cAAc,GAAG1B,aAAa,CAACE,QAAD,CAApC;EAGA,IAAMyB,MAAM,GAAG,EAAf;;EAKA,KAAK,IAAI9D,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG6D,cAAc,CAAC5D,MAAnC,EAA2CD,CAAC,EAA5C,EAAgD;IAC9C,IAAI+B,IAAI,GAAGD,MAAM,CAACC,IAAP,CAAY8B,cAAc,CAAC7D,CAAD,CAA1B,EAA+B,CAA/B,CAAX;IACA8D,MAAM,CAAC/B,IAAD,CAAN,GAAe8B,cAAc,CAAC7D,CAAD,CAAd,CAAkB+B,IAAlB,GAAf;;;EAIF,oBACE,oBAAC,cAAD,CAAgB,QAAhB;IAAyB,KAAK,EAAE+B;KAASF,QAAzC,CADF;AAGD,CAnBD;;;;;"}