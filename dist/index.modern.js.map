{"version":3,"file":"index.modern.js","sources":["../src/createContext.js","../src/useReducer.js","../src/useContextSelector.js","../src/index.js"],"sourcesContent":["import React, {\r\n  createContext as createContextOriginal,\r\n  useEffect,\r\n  useRef\r\n} from 'react'\r\n\r\nexport const ORIGINAL_PROVIDER = Symbol()\r\n\r\nfunction createProvider(ProviderOriginal) {\r\n  return ({ value, children }) => {\r\n    const valueRef = useRef(value)\r\n    const listenersRef = useRef(new Set())\r\n    const contextValue = useRef({\r\n      value: valueRef,\r\n      registerListener: (listener) => {\r\n        listenersRef.current.add(listener)\r\n        return () => listenersRef.current.delete(listener)\r\n      },\r\n      listeners: new Set()\r\n    })\r\n\r\n    useEffect(() => {\r\n      valueRef.current = value\r\n      listenersRef.current.forEach((listener) => {\r\n        listener(value)\r\n      })\r\n    }, [value])\r\n\r\n    return (\r\n      <ProviderOriginal value={contextValue.current}>\r\n        {children}\r\n      </ProviderOriginal>\r\n    )\r\n  }\r\n}\r\n\r\nexport default function createContext(defaultValue) {\r\n  const context = createContextOriginal({\r\n    value: {\r\n      current: defaultValue\r\n    },\r\n    register: () => {\r\n      return () => {}\r\n    }\r\n  })\r\n\r\n  delete context.Consumer\r\n\r\n  context.Provider = createProvider(context.Provider)\r\n\r\n  return context\r\n}\r\n","import React, { useCallback, useRef, useState } from 'react'\r\n\r\nfunction useForceUpdate() {\r\n    const [force, forceUpdate] = useState(null)\r\n    force\r\n    return forceUpdate\r\n}\r\n\r\nexport function useReducer({reducer = null, asyncReducer = {}, initialState = {}, middleware = {}, actions = [], asyncActions = []}) {\r\n    if (reducer === null) {\r\n        console.warn('No reducer, use Reducer returned no state or dispatch')\r\n        return []\r\n    }\r\n\r\n    const forceUpdate = useForceUpdate()\r\n    const state = useRef(initialState)\r\n    const getState = useCallback(() => {\r\n        return state\r\n    }, [state])\r\n\r\n    const onLoading = (reducerName) => () => {\r\n        return setValue(reducerName)({ type: 'LOADING' })\r\n    }\r\n\r\n    const onSuccess = (reducerName) => (payload) => {\r\n        return setValue(reducerName)({ type: 'SUCCESS', payload })\r\n    }\r\n\r\n    const onFail = (reducerName) => (payload) => {\r\n        return setValue(reducerName)({ type: 'FAIL', payload })\r\n    }\r\n\r\n    const onProgress = (reducerName) => (payload) => {\r\n        return setValue(reducerName)({ type: 'PROGRESS', payload })\r\n        // forceUpdate({ ...state.current, [reducerName]: nextState })\r\n    }\r\n\r\n    const setValue = useCallback(\r\n        (reducerName) => async (action) => {\r\n            let noAction = false\r\n\r\n            // Initialize next state\r\n            let nextState = state.current[reducerName]\r\n            let newAction = action\r\n            \r\n            // If store is not defined in action set it\r\n            if (newAction.store === undefined) {\r\n                newAction.store = nextState\r\n            }\r\n\r\n            // Run before ware\r\n            if (middleware?.[reducerName]?.beforeWare !== undefined && middleware[reducerName].beforeWare.length !== 0) {\r\n                middleware?.[reducerName].beforeWare.forEach((beforeWare) => {\r\n                    beforeWare(newAction)\r\n                })\r\n            }\r\n\r\n            // If action is a regular function\r\n            if (actions[reducerName].includes(action.type)) {\r\n                nextState = reducer[reducerName](state.current[reducerName], action)\r\n                newAction.store = nextState\r\n            } \r\n            // If action is asyncronous\r\n            else if (asyncActions[reducerName].includes(action.type)) {\r\n                nextState = await asyncReducer[reducerName](newAction, onSuccess(reducerName), onFail(reducerName), onProgress(reducerName), onLoading(reducerName))\r\n                newAction.store = nextState\r\n            } \r\n            // If action doesn't exist\r\n            else {\r\n                noAction = true\r\n                logger.warn('No state change, no update')\r\n            }\r\n\r\n            if (middleware?.[reducerName]?.afterWare !== undefined && middleware[reducerName].afterWare.length !== 0) {\r\n                middleware?.[reducerName].afterWare.forEach((afterWare) => {\r\n                    afterWare(newAction)\r\n                })\r\n            }\r\n\r\n            state.current[reducerName] = nextState\r\n\r\n            // Trigger only if an action was performed\r\n            if (noAction === false) {\r\n                forceUpdate({ ...state.current, [reducerName]: nextState })\r\n            }\r\n\r\n            return nextState\r\n        },\r\n        [getState]\r\n    )\r\n\r\n    return [state.current, setValue]\r\n}\r\n","import { useContext, useEffect, useRef, useState } from 'react'\r\n\r\nexport default function useContextSelector(context, selector) {\r\n  const { value, registerListener } = useContext(context)\r\n  // We use a state to store the selectedValue\r\n  // It will re-render only if the value changes\r\n  // As you may notice, I lazily initialize the value\r\n  const [selectedValue, setSelectedValue] = useState(() =>\r\n    selector(value.current)\r\n  )\r\n  const selectorRef = useRef(selector)\r\n\r\n  useEffect(() => {\r\n    // Store the selector function at each render\r\n    // Because maybe the function has changed\r\n    selectorRef.current = selector\r\n  })\r\n\r\n  useEffect(() => {\r\n    const updateValueIfNeeded = (newValue) => {\r\n      // Calculate the new selectedValue\r\n      const newSelectedValue = selectorRef.current(newValue)\r\n      // Only update when selected values are not the same\r\n      // React will only re-render if the reference has changed\r\n      // Use the callback to be able to select callback too\r\n      // Otherwise it will the selected callback\r\n      if (selectedValue !== newSelectedValue) {\r\n        setSelectedValue(() => newSelectedValue)\r\n      }\r\n    }\r\n\r\n    const unregisterListener = registerListener(updateValueIfNeeded)\r\n\r\n    return unregisterListener\r\n  }, [registerListener, value, selectedValue])\r\n\r\n  return selectedValue\r\n}\r\n","/************************************************\r\n * React Diffuse\r\n * @description Global state management solution\r\n * @copyright 2022 RAPMINTS, LLC. All rights reserved.\r\n * @author Kyle Watkins, Paul Scala\r\n * @example https://codesandbox.io/s/wispy-leaf-iyp9k6\r\n ************************************************/\r\nimport React, { useMemo } from 'react'\r\nimport createContext from './createContext'\r\nimport { useReducer } from './useReducer'\r\nimport useContextSelector from './useContextSelector'\r\n\r\n// Create diffuse context\r\nconst DiffuseContext = createContext()\r\n\r\n/**\r\n * Diffuse ContextSelector\r\n * @param {function} selector Select from context\r\n */\r\nfunction useFuse(selector) {\r\n    return useContextSelector(DiffuseContext, (context) => selector(context.state))\r\n}\r\n\r\n/**\r\n * Use dispatch hook\r\n * @param {string} reducerName Name of reducer to get dispatch for. Defaults to null, if null use generic dispatcher\r\n * @returns {function} Dispatch function\r\n */\r\nfunction useDispatch(reducerName = null) {\r\n    if (reducerName === null) {\r\n        return useContextSelector(DiffuseContext, (context) => context.dispatch)\r\n    }\r\n    return useContextSelector(DiffuseContext, (context) => context.dispatch)(reducerName)\r\n}\r\n\r\n/**\r\n * Connects Child to a specified fuse\r\n * @param {string} fuseName Fuse to reference\r\n * @param {Component} Child Component to reference\r\n * @returns Wired component\r\n */\r\nconst connectWire = (fuseName, Child) => (props) => {\r\n    // Get from fuse\r\n    const context = useFuse(selector => selector[fuseName]) \r\n    \r\n    // Get dispatch for fuse\r\n    const dispatch = useDispatch(fuseName)\r\n\r\n    // Get fuse\r\n    const fuse = {\r\n        [fuseName]: {\r\n            store: context,\r\n            dispatch: dispatch\r\n        }\r\n    }\r\n\r\n    // Set up memoization\r\n    return useMemo(() => <Child {...fuse} {...props} />, [props, context])\r\n}\r\n\r\n/**\r\n * Wires component to a specified fuses\r\n * @param {object} properties\r\n * @param {string} properties.fuseName Fuse to reference\r\n * @param {Component} properties.component Component to reference\r\n * @returns Wired component\r\n */\r\nconst wire = ({ fuseName = [], Child }) => {\r\n    // Set child\r\n    let newChild = Child\r\n    \r\n    // Connect all wires to fuses by name\r\n    fuseName.forEach((name)=> {\r\n        newChild = connectWire(name, newChild)\r\n    })\r\n\r\n    return newChild\r\n}\r\n\r\n/**\r\n * Creates a reducer\r\n * @param {object} props Reducer props\r\n * @param {object} props.initialState Initial reducer state\r\n * @param {array} props.actions Key value pair of functions\r\n */\r\nconst createReducer = ({ initialState = {}, actions = [], middleware = { beforeWare: [], afterWare: [] }, asyncActions = null }) => {\r\n    // Reducer\r\n    const reducer = {\r\n        // Initial state dictionary\r\n        initialState: {\r\n            diffuse: {\r\n                loading: false,\r\n                error: false\r\n            },\r\n            ...initialState\r\n        },\r\n\r\n        // Actions dictionary\r\n        actionsDict: {\r\n            INITIALIZE_STORE: (state, payload = {}) => {\r\n                return {\r\n                    diffuse: {\r\n                        loading: false,\r\n                        error: false\r\n                    },\r\n                    ...initialState,\r\n                    ...payload\r\n                }\r\n            },\r\n            LOADING: (state) => {\r\n                return {\r\n                    diffuse: {\r\n                        loading: true,\r\n                        error: false\r\n                    }\r\n                }\r\n            },\r\n            SUCCESS: (state, payload) => {\r\n                return {\r\n                    diffuse: {\r\n                        loading: false,\r\n                        error: false\r\n                    },\r\n                    ...payload\r\n                }\r\n            },\r\n            PROGRESS: (state, payload) => {\r\n                return {\r\n                    ...payload\r\n                }\r\n            },\r\n            FAIL: (state, payload) => {\r\n                return {\r\n                    diffuse: {\r\n                        loading: false,\r\n                        error: true\r\n                    },\r\n                    ...payload\r\n                }\r\n            }\r\n        },\r\n\r\n        // Async actions dictionary\r\n        asyncActionsDict: {},\r\n\r\n        // Middleware\r\n        middleware: middleware,\r\n\r\n        // Initialized reducer function\r\n        initialize: (name) => ({\r\n            name: name,\r\n            initialState: { ...reducer.initialState },\r\n            middleware: middleware,\r\n            reducer: reducer.reducer,\r\n            asyncReducer: reducer.asyncReducer,\r\n            actions: reducer.actionsDict,\r\n            asyncActions: reducer.asyncActionsDict\r\n        }),\r\n\r\n        /**\r\n         * Performs action on state\r\n         * @param {object} state Current state\r\n         * @param {object} action Action type and payload to perform on state\r\n         * @returns New state\r\n         */\r\n        reducer: (state, action) => {\r\n            // If action exist in dictionary run the action and return the value\r\n            if (action.type in reducer.actionsDict) {\r\n                const res = reducer.actionsDict[action.type](state, action.payload)\r\n                return {\r\n                    ...state,\r\n                    ...res\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Performs async action on state\r\n         * @param {object} action Action type and payload to perform on state\r\n         * @param {function} onSuccess On success of running async action\r\n         * @param {function} onFail On fail of running async action\r\n         * @param {function} onProgress In progress of running async action\r\n         * @param {function} onLoading Start loading async action\r\n         * @returns New state based on async action\r\n         */\r\n        asyncReducer: async (action, onSuccess, onFail, onProgress, onLoading) => {\r\n            onLoading()\r\n            return {\r\n                ...(await reducer.asyncActionsDict[action.type](\r\n                    {\r\n                        state: action.store,\r\n                        payload: action.payload\r\n                    },\r\n                    onSuccess,\r\n                    onFail,\r\n                    onProgress\r\n                )),\r\n                type: action.type\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Add action to reducer\r\n         * @param {string} actionName Action name\r\n         * @param {function} action Action to perform on reducer\r\n         */\r\n        addAction: (actionName, action) => {\r\n            // Add regular action\r\n            if (action.type === 'action') {\r\n                reducer.actionsDict[actionName] = action.job\r\n            }\r\n            // Add async action\r\n            else if (action.type === 'async') {\r\n                reducer.asyncActionsDict[actionName] = action.job\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Remove action from reducer\r\n         * @param {string} actionName Action name to remove from reducer\r\n         */\r\n        removeAction: (actionName) => {\r\n            // Remove action by name\r\n            if (actionName in reducer.actionsDict) {\r\n                delete reducer.actionsDict[actionName]\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get actions from reducer\r\n         * @returns Array of actions\r\n         */\r\n        getActions: () => {\r\n            // Init actions array\r\n            const actions = []\r\n\r\n            // For each action push to array\r\n            for (const key in reducer.actionsDict) {\r\n                actions.push(reducer.actionsDict[key])\r\n            }\r\n\r\n            // return actions\r\n            return actions\r\n        }\r\n    }\r\n\r\n    // Add actions to dictionary\r\n    for (const key in actions) {\r\n        reducer.addAction(key, actions[key])\r\n    }\r\n\r\n    return reducer\r\n}\r\n\r\n/**\r\n * Diffuse setup class\r\n */\r\nclass setupDiffuseClass {\r\n    constructor() {\r\n        this.globalStateMachine = {}\r\n    }\r\n\r\n    /**\r\n     * Create global state\r\n     * @param {object[]} reducers Initialized reducers \r\n     * @returns Store\r\n     */\r\n    createGlobalState(reducers) {\r\n        const initialState = {}\r\n        const reducer = {}\r\n        const asyncReducer = {}\r\n        const middleware = {}\r\n        const actions = {}\r\n        const asyncActions = {}\r\n        reducers.map((singleReducer) => {\r\n            initialState[singleReducer.name] = singleReducer.initialState\r\n            reducer[singleReducer.name] = singleReducer.reducer\r\n            asyncReducer[singleReducer.name] = singleReducer.asyncReducer\r\n            middleware[singleReducer.name] = singleReducer.middleware\r\n            actions[singleReducer.name] = Object.keys(singleReducer.actions)\r\n            asyncActions[singleReducer.name] = Object.keys(singleReducer.asyncActions)\r\n        })\r\n\r\n        const globalStateMachine = {\r\n            initialState: initialState,\r\n            reducer: reducer,\r\n            asyncReducer: asyncReducer,\r\n            middleware: middleware,\r\n            actions: actions,\r\n            asyncActions: asyncActions\r\n        }\r\n\r\n        this.globalStateMachine = globalStateMachine\r\n\r\n        return globalStateMachine\r\n    }\r\n}\r\n\r\n// Setup singleton class\r\nconst SetupDiffuse = new setupDiffuseClass()\r\n\r\n/**\r\n * Create global state from reducers\r\n * @param {object[]} reducers Initialized reducers \r\n * @returns Store\r\n */\r\nconst createGlobalState = (reducers) => {\r\n    if (SetupDiffuse === undefined) {\r\n        SetupDiffuse = new setupDiffuseClass()\r\n    }\r\n\r\n    return SetupDiffuse.createGlobalState(reducers)\r\n}\r\n\r\n/**\r\n * Diffuse Provider\r\n * @param {object} properties Properties for Diffusion\r\n * @param {object[]} properties.reducers Array of initialized reducers\r\n * @param {Component} properties.children Main App\r\n */\r\nconst Diffuse = ({ reducers, children }) => {\r\n    // Get globalStateMachine from singleton class\r\n    let globalStateMachine = SetupDiffuse.globalStateMachine\r\n\r\n    // If reducers not undefined\r\n    if (reducers !== undefined) {\r\n        // Create store if reducers are passed through props\r\n        globalStateMachine = createGlobalState(reducers)\r\n    }\r\n\r\n    if (Object.keys(globalStateMachine).length === 0) {\r\n        console.warn('No reducers specified')\r\n    }\r\n    \r\n    // Use reducer\r\n    const [state, dispatch] = useReducer(globalStateMachine)\r\n\r\n    // Return diffusion provider\r\n    return <DiffuseContext.Provider value={{ state, dispatch }}>{children}</DiffuseContext.Provider>\r\n}\r\n\r\nexport { wire, createReducer, createGlobalState, useFuse, useDispatch}\r\n\r\nexport default Diffuse\r\n"],"names":["createProvider","ProviderOriginal","value","children","valueRef","useRef","listenersRef","Set","contextValue","registerListener","listener","current","add","listeners","useEffect","forEach","createContext","defaultValue","context","createContextOriginal","register","Consumer","Provider","useForceUpdate","useState","force","forceUpdate","useReducer","reducer","asyncReducer","initialState","middleware","actions","asyncActions","console","warn","state","getState","useCallback","onLoading","reducerName","setValue","type","onSuccess","payload","onFail","onProgress","action","afterWare","undefined","length","newAction","nextState","noAction","store","beforeWare","includes","logger","useContextSelector","selector","useContext","selectedValue","setSelectedValue","selectorRef","updateValueIfNeeded","newValue","newSelectedValue","unregisterListener","DiffuseContext","useFuse","useDispatch","dispatch","connectWire","fuseName","Child","props","fuse","useMemo","wire","newChild","name","createReducer","diffuse","loading","error","actionsDict","INITIALIZE_STORE","LOADING","SUCCESS","PROGRESS","FAIL","asyncActionsDict","initialize","res","addAction","actionName","job","removeAction","getActions","key","push","setupDiffuseClass","globalStateMachine","createGlobalState","reducers","map","singleReducer","Object","keys","SetupDiffuse","Diffuse"],"mappings":"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"}