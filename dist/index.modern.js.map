{"version":3,"file":"index.modern.js","sources":["../src/createContext.js","../src/useReducer.js","../src/useContextSelector.js","../src/index.js"],"sourcesContent":["import React, {\r\n  createContext as createContextOriginal,\r\n  useEffect,\r\n  useRef\r\n} from 'react'\r\n\r\nexport const ORIGINAL_PROVIDER = Symbol()\r\n\r\nfunction createProvider(ProviderOriginal) {\r\n  return ({ value, children }) => {\r\n    const valueRef = useRef(value)\r\n    const prevValueRef = useRef()\r\n    const listenersRef = useRef(new Set())\r\n    const contextValue = useRef({\r\n      value: valueRef,\r\n      registerListener: (listener) => {\r\n        listenersRef.current.add(listener)\r\n        return () => listenersRef.current.delete(listener)\r\n      },\r\n      listeners: new Set()\r\n    })\r\n  \r\n    useEffect(() => {\r\n      valueRef.current = value\r\n      listenersRef.current.forEach((listener) => {\r\n        // Update listener where fuse name matches the reducer update\r\n        if (listener !== undefined && listener.fuse === value?.reducerUpdated) {\r\n          listener.shouldUpdate(value)\r\n        }\r\n      })\r\n    }, [value])\r\n\r\n    return (\r\n      <ProviderOriginal value={contextValue.current}>\r\n        {children}\r\n      </ProviderOriginal>\r\n    )\r\n  }\r\n}\r\n\r\nexport default function createContext(defaultValue) {\r\n  const context = createContextOriginal({\r\n    value: {\r\n      current: defaultValue\r\n    },\r\n    register: () => {\r\n      return () => {}\r\n    }\r\n  })\r\n\r\n  delete context.Consumer\r\n\r\n  context.Provider = createProvider(context.Provider)\r\n\r\n  return context\r\n}\r\n","import React, { useCallback, useRef, useState } from 'react'\r\n\r\nfunction useForceUpdate() {\r\n    const [force, forceUpdate] = useState(null)\r\n    force\r\n    return forceUpdate\r\n}\r\n\r\nexport function useReducer({reducer = null, asyncReducer = {}, initialState = {}, middleware = {}, actions = [], asyncActions = []}) {\r\n    if (reducer === null) {\r\n        console.warn('No reducer, use Reducer returned no state or dispatch')\r\n        return []\r\n    }\r\n\r\n    const forceUpdate = useForceUpdate()\r\n    const state = useRef(initialState)\r\n    const reducerUpdated = useRef()\r\n    const getState = useCallback(() => {\r\n        return state\r\n    }, [state])\r\n\r\n    const onLoading = (reducerName) => () => {\r\n        return setValue(reducerName)({ type: 'LOADING' })\r\n    }\r\n\r\n    const onSuccess = (reducerName) => (payload) => {\r\n        return setValue(reducerName)({ type: 'SUCCESS', payload })\r\n    }\r\n\r\n    const onFail = (reducerName) => (payload) => {\r\n        return setValue(reducerName)({ type: 'FAIL', payload })\r\n    }\r\n\r\n    const onProgress = (reducerName) => (payload) => {\r\n        return setValue(reducerName)({ type: 'PROGRESS', payload })\r\n        // forceUpdate({ ...state.current, [reducerName]: nextState })\r\n    }\r\n\r\n    const setValue = useCallback(\r\n        (reducerName) => async (action) => {\r\n            let noAction = false\r\n\r\n            // Initialize next state\r\n            let nextState = state.current[reducerName]\r\n            let newAction = action\r\n            \r\n            // If store is not defined in action set it\r\n            if (newAction.store === undefined) {\r\n                newAction.store = nextState\r\n            }\r\n\r\n            // Run before ware\r\n            if (middleware?.[reducerName]?.beforeWare !== undefined && middleware[reducerName].beforeWare.length !== 0) {\r\n                middleware?.[reducerName].beforeWare.forEach((beforeWare) => {\r\n                    beforeWare(newAction)\r\n                })\r\n            }\r\n\r\n            // If action is a regular function\r\n            if (actions[reducerName].includes(action.type)) {\r\n                nextState = reducer[reducerName](state.current[reducerName], action)\r\n                newAction.store = nextState\r\n            } \r\n            // If action is asyncronous\r\n            else if (asyncActions[reducerName].includes(action.type)) {\r\n                nextState = await asyncReducer[reducerName](newAction, onSuccess(reducerName), onFail(reducerName), onProgress(reducerName), onLoading(reducerName))\r\n                newAction.store = nextState\r\n            } \r\n            // If action doesn't exist\r\n            else {\r\n                noAction = true\r\n                logger.warn('No state change, no update')\r\n            }\r\n\r\n            if (middleware?.[reducerName]?.afterWare !== undefined && middleware[reducerName].afterWare.length !== 0) {\r\n                middleware?.[reducerName].afterWare.forEach((afterWare) => {\r\n                    afterWare(newAction)\r\n                })\r\n            }\r\n\r\n            state.current[reducerName] = nextState\r\n\r\n            // Trigger only if an action was performed\r\n            if (noAction === false) {\r\n                forceUpdate({ ...state.current, [reducerName]: nextState })\r\n            }\r\n            \r\n            reducerUpdated.current = reducerName\r\n            return nextState\r\n        },\r\n        [getState]\r\n    )\r\n\r\n    return [state.current, setValue, reducerUpdated.current]\r\n}\r\n","import { useContext, useEffect, useRef, useState } from 'react'\r\n\r\nexport default function useFuseSelector(context, fuse) {\r\n  const { value, registerListener} = useContext(context)\r\n  const selector = (context) => context.state[fuse]\r\n  // We use a state to store the selectedValue\r\n  // It will re-render only if the value changes\r\n  // As you may notice, I lazily initialize the value\r\n  const [selectedValue, setSelectedValue] = useState(() =>\r\n    selector(value.current)\r\n  )\r\n\r\n  const selectorRef = useRef(selector)\r\n\r\n  useEffect(() => {\r\n    // Store the selector function at each render\r\n    // Because maybe the function has changed\r\n    selectorRef.current = selector\r\n  })\r\n\r\n  useEffect(() => {\r\n    \r\n    const updateValueIfNeeded = (newValue) => {\r\n      // Calculate the new selectedValue\r\n      const newSelectedValue = selectorRef.current(newValue)\r\n      // Only update when selected values are not the same\r\n      // React will only re-render if the reference has changed\r\n      // Use the callback to be able to select callback too\r\n      // Otherwise it will the selected callback\r\n      if (selectedValue !== newSelectedValue) {\r\n        setSelectedValue(() => newSelectedValue)\r\n      }\r\n    }\r\n\r\n    const unregisterListener = registerListener({fuse: fuse, shouldUpdate:updateValueIfNeeded})\r\n\r\n    return unregisterListener\r\n  }, [registerListener, value, selectedValue])\r\n  \r\n  return selectedValue\r\n}\r\n\r\nexport function useContextSelector(context, selector) {\r\n  const { value, registerListener } = useContext(context)\r\n  // We use a state to store the selectedValue\r\n  // It will re-render only if the value changes\r\n  // As you may notice, I lazily initialize the value\r\n  const [selectedValue, setSelectedValue] = useState(() =>\r\n    selector(value.current)\r\n  )\r\n  const selectorRef = useRef(selector)\r\n\r\n  useEffect(() => {\r\n    // Store the selector function at each render\r\n    // Because maybe the function has changed\r\n    selectorRef.current = selector\r\n  })\r\n\r\n  useEffect(() => {\r\n    const updateValueIfNeeded = (newValue) => {\r\n      // Calculate the new selectedValue\r\n      const newSelectedValue = selectorRef.current(newValue)\r\n      // Only update when selected values are not the same\r\n      // React will only re-render if the reference has changed\r\n      // Use the callback to be able to select callback too\r\n      // Otherwise it will the selected callback\r\n      if (selectedValue !== newSelectedValue) {\r\n        setSelectedValue(() => newSelectedValue)\r\n      }\r\n    }\r\n\r\n    const unregisterListener = registerListener({shouldUpdate:updateValueIfNeeded})\r\n\r\n    return unregisterListener\r\n  }, [registerListener, value, selectedValue])\r\n\r\n  return selectedValue\r\n}","/************************************************\r\n * React Diffuse\r\n * @description Global state management solution\r\n * @copyright 2022 RAPMINTS, LLC. All rights reserved.\r\n * @author Kyle Watkins, Paul Scala\r\n * @example https://codesandbox.io/s/wispy-leaf-iyp9k6\r\n ************************************************/\r\nimport React, { useMemo } from 'react'\r\nimport createContext from './createContext'\r\nimport { useReducer } from './useReducer'\r\nimport useFuseSelector, { useContextSelector } from './useContextSelector'\r\n\r\n// Create diffuse context\r\nconst DiffuseContext = createContext()\r\n\r\n/**\r\n * Diffuse ContextSelector\r\n * @param {function} selector Select from context\r\n */\r\nfunction useFuse(fuse) {\r\n    return useFuseSelector(DiffuseContext, fuse)\r\n}\r\n\r\n/**\r\n * Use dispatch hook\r\n * @param {string} reducerName Name of reducer to get dispatch for. Defaults to null, if null use generic dispatcher\r\n * @returns {function} Dispatch function\r\n */\r\nfunction useDispatch(reducerName = null) {\r\n    if (reducerName === null) {\r\n        return useContextSelector(DiffuseContext, (context) => context.dispatch)\r\n    }\r\n    return useContextSelector(DiffuseContext, (context) => context.dispatch)(reducerName)\r\n}\r\n\r\n/**\r\n * Use actions hook\r\n * @param {string} reducerName Name of reducer to get actions for. Defaults to null, if null willl return empty actions list\r\n * @returns {object} List of actions to be ran as functions \r\n */\r\nfunction useActions(reducerName = null) {\r\n    if (reducerName === null) {\r\n        console.warn(\"Reducer name is null please specify a name\")\r\n        return {}\r\n    } \r\n\r\n    const dispatch = useContextSelector(DiffuseContext, (context) => context.dispatch)(reducerName)\r\n\r\n    if (dispatch === undefined) {\r\n        console.warn(`Reducer of the name ${reducerName} does not exist`)\r\n        return {}\r\n    }\r\n    \r\n    const actionsDict = [...SetupDiffuse.globalStateMachine.actions[reducerName], ...SetupDiffuse.globalStateMachine.asyncActions[reducerName]]\r\n\r\n    const actions = {}\r\n\r\n    actionsDict.map(actionName => {\r\n        actions[actionName] = (payload) => {\r\n            dispatch({type: actionName, payload})\r\n        }\r\n    })\r\n\r\n    return actions\r\n}\r\n\r\n/**\r\n * Connects Child to a specified fuse\r\n * @param {string} fuseName Fuse to reference\r\n * @param {Component} Child Component to reference\r\n * @returns Wired component\r\n */\r\nconst connectWire = (fuseName, Child) => (props) => {\r\n    // Get from fuse\r\n    const context = useFuse(fuseName) \r\n    \r\n    // Get dispatch for fuse\r\n    const dispatch = useDispatch(fuseName)\r\n\r\n    const actions = useActions(fuseName)\r\n\r\n    // Get fuse\r\n    const fuse = {\r\n        [fuseName]: {\r\n            store: context,\r\n            dispatch: dispatch,\r\n            actions: actions\r\n        }\r\n    }\r\n\r\n    // Set up memoization\r\n    return useMemo(() => <Child {...fuse} {...props} />, [props, context])\r\n}\r\n\r\n/**\r\n * Wires component to a specified fuses\r\n * @param {object} properties\r\n * @param {string} properties.fuseName Fuse to reference\r\n * @param {Component} properties.component Component to reference\r\n * @returns Wired component\r\n */\r\nconst wire = ({ fuseName = [], Child }) => {\r\n    // Set child\r\n    let newChild = Child\r\n    \r\n    // Connect all wires to fuses by name\r\n    fuseName.forEach((name)=> {\r\n        newChild = connectWire(name, newChild)\r\n    })\r\n\r\n    return newChild\r\n}\r\n\r\n/**\r\n * Creates a reducer\r\n * @param {object} props Reducer props\r\n * @param {object} props.initialState Initial reducer state\r\n * @param {array} props.actions Key value pair of functions\r\n */\r\nconst createReducer = ({ initialState = {}, actions = [], middleware = { beforeWare: [], afterWare: [] }, asyncActions = null }) => {\r\n    // Reducer\r\n    const reducer = {\r\n        // Initial state dictionary\r\n        initialState: {\r\n            diffuse: {\r\n                loading: false,\r\n                error: false\r\n            },\r\n            ...initialState\r\n        },\r\n\r\n        // Actions dictionary\r\n        actionsDict: {\r\n            INITIALIZE_STORE: (state, payload = {}) => {\r\n                return {\r\n                    diffuse: {\r\n                        loading: false,\r\n                        error: false\r\n                    },\r\n                    ...initialState,\r\n                    ...payload\r\n                }\r\n            },\r\n            LOADING: (state) => {\r\n                return {\r\n                    diffuse: {\r\n                        loading: true,\r\n                        error: false\r\n                    }\r\n                }\r\n            },\r\n            SUCCESS: (state, payload) => {\r\n                return {\r\n                    diffuse: {\r\n                        loading: false,\r\n                        error: false\r\n                    },\r\n                    ...payload\r\n                }\r\n            },\r\n            PROGRESS: (state, payload) => {\r\n                return {\r\n                    ...payload\r\n                }\r\n            },\r\n            FAIL: (state, payload) => {\r\n                return {\r\n                    diffuse: {\r\n                        loading: false,\r\n                        error: true\r\n                    },\r\n                    ...payload\r\n                }\r\n            }\r\n        },\r\n\r\n        // Async actions dictionary\r\n        asyncActionsDict: {},\r\n\r\n        // Middleware\r\n        middleware: middleware,\r\n\r\n        // Initialized reducer function\r\n        initialize: (name) => ({\r\n            name: name,\r\n            initialState: { ...reducer.initialState },\r\n            middleware: middleware,\r\n            reducer: reducer.reducer,\r\n            asyncReducer: reducer.asyncReducer,\r\n            actions: reducer.actionsDict,\r\n            asyncActions: reducer.asyncActionsDict\r\n        }),\r\n\r\n        /**\r\n         * Performs action on state\r\n         * @param {object} state Current state\r\n         * @param {object} action Action type and payload to perform on state\r\n         * @returns New state\r\n         */\r\n        reducer: (state, action) => {\r\n            // If action exist in dictionary run the action and return the value\r\n            if (action.type in reducer.actionsDict) {\r\n                const res = reducer.actionsDict[action.type](state, action.payload)\r\n                return {\r\n                    ...state,\r\n                    ...res\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Performs async action on state\r\n         * @param {object} action Action type and payload to perform on state\r\n         * @param {function} onSuccess On success of running async action\r\n         * @param {function} onFail On fail of running async action\r\n         * @param {function} onProgress In progress of running async action\r\n         * @param {function} onLoading Start loading async action\r\n         * @returns New state based on async action\r\n         */\r\n        asyncReducer: async (action, onSuccess, onFail, onProgress, onLoading) => {\r\n            onLoading()\r\n            return {\r\n                ...(await reducer.asyncActionsDict[action.type](\r\n                    {\r\n                        state: action.store,\r\n                        payload: action.payload\r\n                    },\r\n                    onSuccess,\r\n                    onFail,\r\n                    onProgress\r\n                )),\r\n                type: action.type\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Add action to reducer\r\n         * @param {string} actionName Action name\r\n         * @param {function} action Action to perform on reducer\r\n         */\r\n        addAction: (actionName, action) => {\r\n            // Add regular action\r\n            if (action.type === 'action') {\r\n                reducer.actionsDict[actionName] = action.job\r\n            }\r\n            // Add async action\r\n            else if (action.type === 'async') {\r\n                reducer.asyncActionsDict[actionName] = action.job\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Remove action from reducer\r\n         * @param {string} actionName Action name to remove from reducer\r\n         */\r\n        removeAction: (actionName) => {\r\n            // Remove action by name\r\n            if (actionName in reducer.actionsDict) {\r\n                delete reducer.actionsDict[actionName]\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get actions from reducer\r\n         * @returns Array of actions\r\n         */\r\n        getActions: () => {\r\n            // Init actions array\r\n            const actions = []\r\n\r\n            // For each action push to array\r\n            for (const key in reducer.actionsDict) {\r\n                actions.push(reducer.actionsDict[key])\r\n            }\r\n\r\n            // return actions\r\n            return actions\r\n        }\r\n    }\r\n\r\n    // Add actions to dictionary\r\n    for (const key in actions) {\r\n        reducer.addAction(key, actions[key])\r\n    }\r\n\r\n    return reducer\r\n}\r\n\r\n/**\r\n * Diffuse setup class\r\n */\r\nclass setupDiffuseClass {\r\n    constructor() {\r\n        this.globalStateMachine = {}\r\n    }\r\n\r\n    /**\r\n     * Create global state\r\n     * @param {object[]} reducers Initialized reducers \r\n     * @returns Store\r\n     */\r\n    createGlobalState(reducers) {\r\n        const initialState = {}\r\n        const reducer = {}\r\n        const asyncReducer = {}\r\n        const middleware = {}\r\n        const actions = {}\r\n        const asyncActions = {}\r\n        reducers.map((singleReducer) => {\r\n            initialState[singleReducer.name] = singleReducer.initialState\r\n            reducer[singleReducer.name] = singleReducer.reducer\r\n            asyncReducer[singleReducer.name] = singleReducer.asyncReducer\r\n            middleware[singleReducer.name] = singleReducer.middleware\r\n            actions[singleReducer.name] = Object.keys(singleReducer.actions)\r\n            asyncActions[singleReducer.name] = Object.keys(singleReducer.asyncActions)\r\n        })\r\n\r\n        const globalStateMachine = {\r\n            initialState: initialState,\r\n            reducer: reducer,\r\n            asyncReducer: asyncReducer,\r\n            middleware: middleware,\r\n            actions: actions,\r\n            asyncActions: asyncActions\r\n        }\r\n\r\n        this.globalStateMachine = globalStateMachine\r\n\r\n        return globalStateMachine\r\n    }\r\n}\r\n\r\n// Setup singleton class\r\nconst SetupDiffuse = new setupDiffuseClass()\r\n\r\n/**\r\n * Create global state from reducers\r\n * @param {object[]} reducers Initialized reducers \r\n * @returns Store\r\n */\r\nconst createGlobalState = (reducers) => {\r\n    if (SetupDiffuse === undefined) {\r\n        SetupDiffuse = new setupDiffuseClass()\r\n    }\r\n\r\n    return SetupDiffuse.createGlobalState(reducers)\r\n}\r\n\r\n/**\r\n * Diffuse Provider\r\n * @param {object} properties Properties for Diffusion\r\n * @param {object[]} properties.reducers Array of initialized reducers\r\n * @param {Component} properties.children Main App\r\n */\r\nconst Diffuse = ({ reducers, children }) => {\r\n    // Get globalStateMachine from singleton class\r\n    let globalStateMachine = SetupDiffuse.globalStateMachine\r\n\r\n    // If reducers not undefined\r\n    if (reducers !== undefined) {\r\n        // Create store if reducers are passed through props\r\n        globalStateMachine = createGlobalState(reducers)\r\n    }\r\n\r\n    if (Object.keys(globalStateMachine).length === 0) {\r\n        console.warn('No reducers specified')\r\n    }\r\n    \r\n    // Use reducer\r\n    const [state, dispatch, reducerUpdated] = useReducer(globalStateMachine)\r\n\r\n    // Return diffusion provider\r\n    return <DiffuseContext.Provider value={{ state, dispatch, reducerUpdated }}>{children}</DiffuseContext.Provider>\r\n}\r\n\r\nexport { wire, createReducer, createGlobalState, useFuse, useDispatch, useActions}\r\n\r\nexport default Diffuse\r\n"],"names":["createProvider","ProviderOriginal","value","children","valueRef","useRef","prevValueRef","listenersRef","Set","contextValue","registerListener","listener","current","add","listeners","useEffect","forEach","undefined","fuse","reducerUpdated","shouldUpdate","createContext","defaultValue","context","createContextOriginal","register","Consumer","Provider","useForceUpdate","useState","force","forceUpdate","useReducer","reducer","asyncReducer","initialState","middleware","actions","asyncActions","console","warn","state","getState","useCallback","onLoading","reducerName","setValue","type","onSuccess","payload","onFail","onProgress","action","afterWare","length","newAction","nextState","noAction","store","beforeWare","includes","logger","useFuseSelector","useContext","selector","selectedValue","setSelectedValue","selectorRef","updateValueIfNeeded","newValue","newSelectedValue","unregisterListener","useContextSelector","DiffuseContext","useFuse","useDispatch","dispatch","useActions","actionsDict","SetupDiffuse","globalStateMachine","map","actionName","connectWire","fuseName","Child","props","useMemo","wire","newChild","name","createReducer","diffuse","loading","error","INITIALIZE_STORE","LOADING","SUCCESS","PROGRESS","FAIL","asyncActionsDict","initialize","res","addAction","job","removeAction","getActions","key","push","setupDiffuseClass","createGlobalState","reducers","singleReducer","Object","keys","Diffuse"],"mappings":"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"}